


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1021 2018/2019 Lab 5
    3 00000000         ;
    4 00000000         ; RAM @ 0x4000000 sz = 0x10000 (64K)
    5 00000000         ;
    6 00000000         
    7 00000000         ;
    8 00000000         ; hardware registers
    9 00000000         ;
   10 00000000         
   11 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   12 00000000         
   13 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   14 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   15 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   16 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   17 00000000         
   18 00000000         
   19 00000000                 AREA             RESET, CODE, READONLY
   20 00000000                 ENTRY
   21 00000000         
   22 00000000         ; 
   23 00000000         ; hardware initialisation
   24 00000000         ;
   25 00000000         
   26 00000000 E59FD32C        LDR              R13, =0x40010000 ; initialse SP
                                                            
   27 00000004 E59F032C        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
   28 00000008 E3A01050        MOV              R1, #0x50   ;
   29 0000000C E5C01000        STRB             R1, [R0]    ;
   30 00000010 E59F0324        LDR              R0, =U0LCR  ; R0 - > U0LCR (lin
                                                            e control register)
                                                            
   31 00000014 E3A01002        LDR              R1, =0x02   ; 7 data bits + par
                                                            ity
   32 00000018 E5C01000        STRB             R1, [R0]    ;
   33 0000001C         
   34 0000001C         ;
   35 0000001C         ; output "ECHO ECho echo ..." to console
   36 0000001C         ; echo typed characters (type CTRL j for a line feed)
   37 0000001C         ;
   38 0000001C         ; replace this with your code
   39 0000001C         ;
   40 0000001C         ; LDR R0, =STR0  ; R0 -> "ECHO ECho echo ..."
   41 0000001C         ; BL PUTS   ; put string
   42 0000001C         ;L BL GET   ; get character
   43 0000001C         ; BL PUT   ; put character
   44 0000001C         ; B L   ; forever
   45 0000001C         
   46 0000001C         
   47 0000001C         ;STR0 DCB "ECHO ECho echo...", 0x0a, 0, 0
   48 0000001C         
   49 0000001C         ;From here, this is my answer code.



ARM Macro Assembler    Page 2 


   50 0000001C         
   51 0000001C E3A04101        LDR              R4,=0x40000000 
                                                            ; R4 ->0x40000000
   52 00000020 E59F5318        LDR              R5,=0x40000100 
                                                            ; R5 ->0x40000100
   53 00000024 E3A06000        MOV              R6, #0      ; R6 = count
   54 00000028 E59F0314        LDR              R0, =STR0   ; R0 -> "Please inp
                                                            ut string."
   55 0000002C EB0000B8        BL               PUTS        ; put string
   56 00000030 EB0000A5 
                       L1      BL               GET         ; get character
   57 00000034 EB0000AB        BL               PUT         ; put character
   58 00000038 E350000D        CMP              R0,#0x0D    ; enter?
   59 0000003C 0A000030        BEQ              L5          ; if "enter", go to
                                                             L5
   60 00000040 E3500008        CMP              R0,#0x08    ; delete ?
   61 00000044 0A00001F        BEQ              L4          ; if "delete", go t
                                                            o L2
   62 00000048 E3500020        CMP              R0,#0x20    ; space?
   63 0000004C 0A00002B        BEQ              L24         ; if "space", go to
                                                             L24
   64 00000050 E350007A        CMP              R0,#0x7A    ; R0 > 0x7A
   65 00000054 CAFFFFF5        BGT              L1          ; if R0 > 0x7A, go 
                                                            to L1
   66 00000058 E3500060        CMP              R0,#0x60    ; R0 > 0x61?
   67 0000005C CA000003        BGT              L2          ; if R0 > 0x61, go 
                                                            to L2
   68 00000060 E3500041        CMP              R0,#0x41    ; R0 < 0x41 ?
   69 00000064 BAFFFFF1        BLT              L1          ; if R0 < 0x41, go 
                                                            to L1
   70 00000068 E350005B        CMP              R0,#0x5B    ; R0 < 0x5B ?
   71 0000006C BA000009        BLT              L3          ; if  R0 < 0x5B, go
                                                             to L3   
   72 00000070         L2                                   ; the case of small
                                                             letter 
   73 00000070 E5C40000        STRB             R0,[R4]     ; MBYTE[R4] = R0
   74 00000074 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
   75 00000078 E2844001        ADD              R4, R4,#1   ; R4 = R4 + 1
   76 0000007C E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
   77 00000080 E2400020        SUB              R0,R0,#0x20 ; R0 = R0 - 0x20
   78 00000084 E5C40000        STRB             R0,[R4]     ; MBYTE[R4] = R0
   79 00000088 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
   80 0000008C E2844001        ADD              R4, R4,#1   ; R4 = R4 + 1
   81 00000090 E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
   82 00000094 EA000009        B                L0          ; go to L0    
   83 00000098         L3                                   ; the case of small
                                                             letter 
   84 00000098 E5C40000        STRB             R0,[R4]     ; MBYTE[R4] = R0
   85 0000009C E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
   86 000000A0 E2844001        ADD              R4, R4,#1   ; R4 = R4 + 1
   87 000000A4 E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
   88 000000A8 E2800020        ADD              R0,R0,#0x20 ; R0 = R0 + 0x20
   89 000000AC E5C40000        STRB             R0,[R4]     ; MBYTE[R4] = R0
   90 000000B0 E5C50000        STRB             R0,[R5]     ; MBYTE[R4] = R0
   91 000000B4 E2844001        ADD              R4, R4,#1   ; R4 = R4 + 1
   92 000000B8 E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
   93 000000BC EAFFFFFF        B                L0          ; go to L0   
   94 000000C0 E2866001 
                       L0      ADD              R6, R6, #1  ; count=count + 1



ARM Macro Assembler    Page 3 


   95 000000C4 EAFFFFD9        B                L1          ; go to L1    
   96 000000C8         L4                                   ; the case of delet
                                                            e 
   97 000000C8 E2444001        SUB              R4,R4,#1    ; R4 = R4 -1
   98 000000CC E2455001        SUB              R5,R5,#1    ; R5 = R5 -1
   99 000000D0 E3A07000        LDR              R7,=0x00    ; R7 = 0x00
  100 000000D4 E5C47000        STRB             R7,[R4]     ; MBYTE[R4] = R7
  101 000000D8 E5C57000        STRB             R7,[R5]     ; MBYTE[R5] = R7
  102 000000DC E2444001        SUB              R4,R4,#1    ; R4 = R4 -1
  103 000000E0 E2455001        SUB              R5,R5,#1    ; R5 = R5 -1
  104 000000E4 E5C47000        STRB             R7, [R4]    ; MBYTE[R4] = R7
  105 000000E8 E5C57000        STRB             R7,[R5]     ; MBYTE[R5] = R7
  106 000000EC E3A00000        LDR              R0,=0x00    ; R0 = 0x00
  107 000000F0 EB00007C        BL               PUT         ; put character
  108 000000F4 E3A00008        LDR              R0,=0x08    ; R0 = "backspace"
  109 000000F8 EB00007A        BL               PUT         ; put character
  110 000000FC EAFFFFCB        B                L1          ; go to L1
  111 00000100         L24                                  ; the case of space
                                                            
  112 00000100 EAFFFFCA        B                L1          ; go to L1 
  113 00000104         L5                                   ; the case of enter
                                                            
  114 00000104 E5C40000        STRB             R0,[R4]     ; MBYTE[R4] = R0
  115 00000108 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
  116 0000010C E3A00101        LDR              R0, =0x40000000 
                                                            ; R0 -> 0x40000000
  117 00000110 E5D00000        LDRB             R0,[R0]     ; R0 = R0
  118 00000114 E350000D        CMP              R0, #0x0D   ; if(isEmpty(s0))
  119 00000118 0AFFFFC4        BEQ              L1          ; go to L1
  120 0000011C         ; From here, this program does compare two words. 
  121 0000011C E59F0224 
                       L21     LDR              R0, =STR4   ; R0 -> ""
  122 00000120 EB00007B        BL               PUTS        ; put string
  123 00000124 E59F5220 
                       L6      LDR              R5, =0x40000200 
                                                            ; R5 ->0x40000200
  124 00000128 EB000067 
                       L7      BL               GET         ; get character
  125 0000012C EB00006D        BL               PUT         ; put character
  126 00000130 E350000D        CMP              R0,#0x0D    ; enter?  
  127 00000134 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
  128 00000138 0A000022        BEQ              L35         ; if "enter", go to
                                                             L35
  129 0000013C E3500008        CMP              R0,#0x08    ; "backspace"?
  130 00000140 0A000015        BEQ              L8          ; if "backspace", g
                                                            o to L8
  131 00000144 E3500020        CMP              R0,#0x20    ; "space"?
  132 00000148 0A00001D        BEQ              L25         ; if "space", go to
                                                             L25
  133 0000014C E350007A        CMP              R0,#0x7A    ; R0 > 0x7A ?
  134 00000150 CAFFFFF1        BGT              L21         ; if R0 > 0x7A, go 
                                                            to L21
  135 00000154 E3500060        CMP              R0,#0x60    ; R0 > 0x61?
  136 00000158 CA000003        BGT              L22         ; go to L22
  137 0000015C E3500041        CMP              R0,#0x41    ; R0 < 0x41 ?
  138 00000160 BAFFFFED        BLT              L21         ; if R0 < 0x41, go 
                                                            to L21
  139 00000164 E350005B        CMP              R0,#0x5B    ; R0 < 0x5B?
  140 00000168 BA000005        BLT              L23         ; if R0 < 0x5B, go 



ARM Macro Assembler    Page 4 


                                                            to L23    
  141 0000016C         L22                                  ; the case of small
                                                             letter
  142 0000016C E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0   
                                                              
  143 00000170 E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
  144 00000174 E2400020        SUB              R0,R0,#0x20 ; R0 = R0 - 0x20
  145 00000178 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
  146 0000017C E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
  147 00000180 EAFFFFE8        B                L7          ; go to L7  
  148 00000184         L23                                  ; the case of capit
                                                            al letter
  149 00000184 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0 
  150 00000188 E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
  151 0000018C E2800020        ADD              R0,R0,#0x20 ; R0 = R0 + 0x20
  152 00000190 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
  153 00000194 E2855001        ADD              R5, R5,#1   ; R5 = R5 + 1
  154 00000198 EAFFFFE2        B                L7          ; go to L7    
  155 0000019C         L8                                   ; the case of "dele
                                                            te"
  156 0000019C E2455001        SUB              R5,R5,#1    ; R5 = R5 -1
  157 000001A0 E3A07000        LDR              R7,=0x00    ; R7 = 0x00
  158 000001A4 E5C57000        STRB             R7,[R5]     ; MBYTE[R5] = R7 
  159 000001A8 E2455001        SUB              R5,R5,#1    ; R5 = R5 -1
  160 000001AC E5C57000        STRB             R7,[R5]     ; MBYTE[R5] = R7
  161 000001B0 E3A00000        LDR              R0,=0x00    ; R0 = 0x00
  162 000001B4 EB00004B        BL               PUT         ; put string
  163 000001B8 E3A00008        LDR              R0,=0x08    ; R0 = 0x08
  164 000001BC EB000049        BL               PUT         ; put string
  165 000001C0 EAFFFFD8        B                L7          ; go to L7
  166 000001C4         L25                                  ; the case of "spac
                                                            e"
  167 000001C4 EAFFFFD7        B                L7          ; go to L7
  168 000001C8         L35                                  ; the case of "ente
                                                            r"
  169 000001C8 E5C50000        STRB             R0,[R5]     ; MBYTE[R5] = R0
  170 000001CC E59F0178        LDR              R0, =0x40000200 
                                                            ; R0 -> 0x40000200
  171 000001D0 E5D00000        LDRB             R0,[R0]     ; R0 = R0
  172 000001D4 E350000D        CMP              R0, #0x0D   ; if(isEmpty(s1))
  173 000001D8 0AFFFFD1        BEQ              L6          ; go to L6        
  174 000001DC E59F4168 
                       L9      LDR              R4, =0x40000200 
                                                            ; R4 -> 0x40000200
  175 000001E0 E5D45000 
                       L10     LDRB             R5, [R4]    ; MBYTE[R5] = R4
  176 000001E4 E1A07086        MOV              R7,R6, LSL#1 
                                                            ; R7 = 2 *R6(count)
                                                            
  177 000001E8 E3A00101        LDR              R0, =0x40000000 
                                                            ; R0 -> 0x40000000
  178 000001EC E3570000 
                       L11     CMP              R7,#0       ; R7 =0?
  179 000001F0 0A000011        BEQ              L14         ; ifR7=0, go to L7
  180 000001F4 E5D08000        LDRB             R8,[R0]     ; MBYTE[R0] = R8
  181 000001F8 E1550008        CMP              R5, R8      ; R5 = R8?
  182 000001FC 0A000002        BEQ              L12         ; if R4 = R0, go to
                                                             L5
  183 00000200 E2800001        ADD              R0,R0,#1    ; R0 = R0 +1



ARM Macro Assembler    Page 5 


  184 00000204 E2477001        SUB              R7,R7,#1    ; R7 = R7 -1 
  185 00000208 EAFFFFF7        B                L11         ; go to L11
  186 0000020C E3A09000 
                       L12     MOV              R9, #0x00   ; R9 = 0x00
  187 00000210 E5C09000        STRB             R9,[R0]     ; MBYTE[R0] = R9
  188 00000214 E2844001        ADD              R4,R4,#1    ; R4 = R4 +1
  189 00000218 E5D48000        LDRB             R8,[R4]     ; MBYTE[R4] = R8
  190 0000021C E358000D        CMP              R8,#0x0D    ; R8 =0x0D?
  191 00000220 0A000000        BEQ              L13         ; if R8 =0x0D, go t
                                                            o L13
  192 00000224 1AFFFFED        BNE              L10         ; if not R8 =0x0D, 
                                                            go to L10
  193 00000228 E59F0118 
                       L13     LDR              R0, =STR4   ; R0 -> ""  
  194 0000022C EB000038        BL               PUTS        ; put string
  195 00000230 E59F0118        LDR              R0, =STR2   ; R0->"Y"
  196 00000234 EB000036        BL               PUTS        ; put string
  197 00000238 EA000003        B                L15         ; go to L15
  198 0000023C E59F0104 
                       L14     LDR              R0, =STR4   ; R0 -> "" 
  199 00000240 EB000033        BL               PUTS        ; put string
  200 00000244 E59F0108        LDR              R0, =STR3   ; R0->"N"
  201 00000248 EB000031        BL               PUTS        ; put string
  202 0000024C E3A04101 
                       L15     LDR              R4,=0x40000000 
                                                            ; R4 -> 0x40000000
  203 00000250 E3A08101        LDR              R8,=0x40000000 
                                                            ; R8 -> 0x40000000
  204 00000254 E1A07086        MOV              R7,R6, LSL#1 
                                                            ; R7 = 2 *R6(count)
                                                            
  205 00000258 E3A05000        LDR              R5, =0x00   ; R5 = 0x00
  206 0000025C E5C45000 
                       L20     STRB             R5,[R4]     ; MBYTE[R4] = R5
  207 00000260 E2844001        ADD              R4, R4, #1  ; R4 = R4 + 1
  208 00000264 E2477001        SUB              R7,R7,#1    ; R7 = R7 + 1
  209 00000268 E3570000        CMP              R7,#0       ; R7 = 0?
  210 0000026C 1AFFFFFA        BNE              L20         ; if not R7 = 0, go
                                                             to L20
  211 00000270         
  212 00000270 E59F50C8        LDR              R5,=0x40000100 
                                                            ; R5 -> 0x40000100
  213 00000274 E5D56000 
                       L16     LDRB             R6,[R5]     ; MBYTE[R5] = R6
  214 00000278 E5C86000        STRB             R6,[R8]     ; MBYTE[R8] = R6
  215 0000027C E2888001        ADD              R8,R8,#1    ; R8 = R8 + 1
  216 00000280 E2855001        ADD              R5,R5,#1    ; R5 = R5 + 1
  217 00000284 E356000D        CMP              R6,#0x0D    ; R6 = 0x0D?
  218 00000288 1AFFFFF9        BNE              L16         ; if not R6 = 0x0D,
                                                             go to L16 
  219 0000028C         
  220 0000028C E59F40B8        LDR              R4, =0x40000200 
                                                            ; R4 -> 0x40000200
  221 00000290 E5D45000 
                       L17     LDRB             R5,[R4]     ; MBYTE[R4] = R5
  222 00000294 E3550000        CMP              R5,#0       ; R5 = 0?
  223 00000298 0AFFFFA1        BEQ              L6          ; if R5 = 0, go to 
                                                            L6
  224 0000029C E3A05000        MOV              R5,#0       ; R5 =0



ARM Macro Assembler    Page 6 


  225 000002A0 E2844001        ADD              R4,R4,#1    ; R4 = R4 +1
  226 000002A4 EAFFFFF9        B                L17
  227 000002A8         
  228 000002A8 50 6C 65 
              61 73 65 
              20 69 6E 
              70 75 74 
              20 73 74 
              72 69 6E 
              67 2E 0A 
              00 00    STR0    DCB              "Please input string.", 0x0a, 0
, 0
  229 000002BF 59 0A 00 
              00       STR2    DCB              "Y",0x0a,0,0
  230 000002C3 4E 0A 00 
              00       STR3    DCB              "N",0x0a,0,0
  231 000002C7 0A 00 00 
                       STR4    DCB              "",0x0a,0,0
  232 000002CA         
  233 000002CA         ;
  234 000002CA         ; subroutines
  235 000002CA         ; 
  236 000002CA         ; GET
  237 000002CA         ;
  238 000002CA         ; leaf function which returns ASCII character typed in U
                       ART #1 window in R0
  239 000002CA         ;
  240 000002CA 00 00 E59F108C 
                       GET     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  241 000002D0 E5910000 
                       GET0    LDR              R0, [R1]    ; wait until
  242 000002D4 E2100001        ANDS             R0, #0x01   ; receiver data
  243 000002D8 0AFFFFFC        BEQ              GET0        ; ready
  244 000002DC E59F1080        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  245 000002E0 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  246 000002E4 E12FFF1E        BX               LR          ; return
  247 000002E8         
  248 000002E8         ; 
  249 000002E8         ; PUT
  250 000002E8         ;
  251 000002E8         ; leaf function which sends ASCII character in R0 to UAR
                       T #1 window
  252 000002E8         ;
  253 000002E8 E59F1070 
                       PUT     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  254 000002EC E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  255 000002F0 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  256 000002F4 0AFFFFFB        BEQ              PUT         ; empty
  257 000002F8 E59F1064        LDR              R1, =U0THR  ; R1 -> U0THR
  258 000002FC E5C10000        STRB             R0, [R1]    ; output charcter
  259 00000300 E59F1058 
                       PUT0    LDR              R1, =U0LSR  ; R1 -> U0LSR



ARM Macro Assembler    Page 7 


  260 00000304 E5D11000        LDRB             R1, [R1]    ; wait until 
  261 00000308 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  262 0000030C 0AFFFFFB        BEQ              PUT0        ; empty (data flush
                                                            ed)
  263 00000310 E12FFF1E        BX               LR          ; return
  264 00000314         
  265 00000314         ; 
  266 00000314         ; PUTS
  267 00000314         ;
  268 00000314         ; sends NUL terminated ASCII string (address in R0) to U
                       ART #1 window
  269 00000314         ;
  270 00000314 E92D4010 
                       PUTS    PUSH             {R4, LR}    ; push R4 and LR
  271 00000318 E1A04000        MOV              R4, R0      ; copy R0
  272 0000031C E4D40001 
                       PUTS0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  273 00000320 E3500000        CMP              R0, #0      ; 0?
  274 00000324 0A000001        BEQ              PUTS1       ; return
  275 00000328 EBFFFFEE        BL               PUT         ; put character
  276 0000032C EAFFFFFA        B                PUTS0       ; next character
  277 00000330 E8BD8010 
                       PUTS1   POP              {R4, PC}    ; pop R4 and PC
  278 00000334         
  279 00000334                 END
              40010000 
              E002C000 
              E000C00C 
              40000100 
              00000000 
              00000000 
              40000200 
              00000000 
              00000000 
              00000000 
              00000000 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab5.d -o.\objects\lab5.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 516" --list=.\listings\lab5.lst lab5.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

GET 000002CC

Symbol: GET
   Definitions
      At line 240 in file lab5.s
   Uses
      At line 56 in file lab5.s
      At line 124 in file lab5.s

GET0 000002D0

Symbol: GET0
   Definitions
      At line 241 in file lab5.s
   Uses
      At line 243 in file lab5.s
Comment: GET0 used once
L0 000000C0

Symbol: L0
   Definitions
      At line 94 in file lab5.s
   Uses
      At line 82 in file lab5.s
      At line 93 in file lab5.s

L1 00000030

Symbol: L1
   Definitions
      At line 56 in file lab5.s
   Uses
      At line 65 in file lab5.s
      At line 69 in file lab5.s
      At line 95 in file lab5.s
      At line 110 in file lab5.s
      At line 112 in file lab5.s
      At line 119 in file lab5.s

L10 000001E0

Symbol: L10
   Definitions
      At line 175 in file lab5.s
   Uses
      At line 192 in file lab5.s
Comment: L10 used once
L11 000001EC

Symbol: L11
   Definitions
      At line 178 in file lab5.s
   Uses
      At line 185 in file lab5.s
Comment: L11 used once
L12 0000020C

Symbol: L12
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 186 in file lab5.s
   Uses
      At line 182 in file lab5.s
Comment: L12 used once
L13 00000228

Symbol: L13
   Definitions
      At line 193 in file lab5.s
   Uses
      At line 191 in file lab5.s
Comment: L13 used once
L14 0000023C

Symbol: L14
   Definitions
      At line 198 in file lab5.s
   Uses
      At line 179 in file lab5.s
Comment: L14 used once
L15 0000024C

Symbol: L15
   Definitions
      At line 202 in file lab5.s
   Uses
      At line 197 in file lab5.s
Comment: L15 used once
L16 00000274

Symbol: L16
   Definitions
      At line 213 in file lab5.s
   Uses
      At line 218 in file lab5.s
Comment: L16 used once
L17 00000290

Symbol: L17
   Definitions
      At line 221 in file lab5.s
   Uses
      At line 226 in file lab5.s
Comment: L17 used once
L2 00000070

Symbol: L2
   Definitions
      At line 72 in file lab5.s
   Uses
      At line 67 in file lab5.s
Comment: L2 used once
L20 0000025C

Symbol: L20
   Definitions
      At line 206 in file lab5.s
   Uses
      At line 210 in file lab5.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: L20 used once
L21 0000011C

Symbol: L21
   Definitions
      At line 121 in file lab5.s
   Uses
      At line 134 in file lab5.s
      At line 138 in file lab5.s

L22 0000016C

Symbol: L22
   Definitions
      At line 141 in file lab5.s
   Uses
      At line 136 in file lab5.s
Comment: L22 used once
L23 00000184

Symbol: L23
   Definitions
      At line 148 in file lab5.s
   Uses
      At line 140 in file lab5.s
Comment: L23 used once
L24 00000100

Symbol: L24
   Definitions
      At line 111 in file lab5.s
   Uses
      At line 63 in file lab5.s
Comment: L24 used once
L25 000001C4

Symbol: L25
   Definitions
      At line 166 in file lab5.s
   Uses
      At line 132 in file lab5.s
Comment: L25 used once
L3 00000098

Symbol: L3
   Definitions
      At line 83 in file lab5.s
   Uses
      At line 71 in file lab5.s
Comment: L3 used once
L35 000001C8

Symbol: L35
   Definitions
      At line 168 in file lab5.s
   Uses
      At line 128 in file lab5.s
Comment: L35 used once
L4 000000C8



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: L4
   Definitions
      At line 96 in file lab5.s
   Uses
      At line 61 in file lab5.s
Comment: L4 used once
L5 00000104

Symbol: L5
   Definitions
      At line 113 in file lab5.s
   Uses
      At line 59 in file lab5.s
Comment: L5 used once
L6 00000124

Symbol: L6
   Definitions
      At line 123 in file lab5.s
   Uses
      At line 173 in file lab5.s
      At line 223 in file lab5.s

L7 00000128

Symbol: L7
   Definitions
      At line 124 in file lab5.s
   Uses
      At line 147 in file lab5.s
      At line 154 in file lab5.s
      At line 165 in file lab5.s
      At line 167 in file lab5.s

L8 0000019C

Symbol: L8
   Definitions
      At line 155 in file lab5.s
   Uses
      At line 130 in file lab5.s
Comment: L8 used once
L9 000001DC

Symbol: L9
   Definitions
      At line 174 in file lab5.s
   Uses
      None
Comment: L9 unused
PUT 000002E8

Symbol: PUT
   Definitions
      At line 253 in file lab5.s
   Uses
      At line 57 in file lab5.s
      At line 107 in file lab5.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 109 in file lab5.s
      At line 125 in file lab5.s
      At line 162 in file lab5.s
      At line 164 in file lab5.s
      At line 256 in file lab5.s
      At line 275 in file lab5.s

PUT0 00000300

Symbol: PUT0
   Definitions
      At line 259 in file lab5.s
   Uses
      At line 262 in file lab5.s
Comment: PUT0 used once
PUTS 00000314

Symbol: PUTS
   Definitions
      At line 270 in file lab5.s
   Uses
      At line 55 in file lab5.s
      At line 122 in file lab5.s
      At line 194 in file lab5.s
      At line 196 in file lab5.s
      At line 199 in file lab5.s
      At line 201 in file lab5.s

PUTS0 0000031C

Symbol: PUTS0
   Definitions
      At line 272 in file lab5.s
   Uses
      At line 276 in file lab5.s
Comment: PUTS0 used once
PUTS1 00000330

Symbol: PUTS1
   Definitions
      At line 277 in file lab5.s
   Uses
      At line 274 in file lab5.s
Comment: PUTS1 used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 19 in file lab5.s
   Uses
      None
Comment: RESET unused
STR0 000002A8

Symbol: STR0
   Definitions
      At line 228 in file lab5.s
   Uses
      At line 54 in file lab5.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: STR0 used once
STR2 000002BF

Symbol: STR2
   Definitions
      At line 229 in file lab5.s
   Uses
      At line 195 in file lab5.s
Comment: STR2 used once
STR3 000002C3

Symbol: STR3
   Definitions
      At line 230 in file lab5.s
   Uses
      At line 200 in file lab5.s
Comment: STR3 used once
STR4 000002C7

Symbol: STR4
   Definitions
      At line 231 in file lab5.s
   Uses
      At line 121 in file lab5.s
      At line 193 in file lab5.s
      At line 198 in file lab5.s

37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 11 in file lab5.s
   Uses
      At line 27 in file lab5.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 15 in file lab5.s
   Uses
      At line 30 in file lab5.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 16 in file lab5.s
   Uses
      At line 240 in file lab5.s
      At line 253 in file lab5.s
      At line 259 in file lab5.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 13 in file lab5.s
   Uses
      At line 244 in file lab5.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 14 in file lab5.s
   Uses
      At line 257 in file lab5.s
Comment: U0THR used once
5 symbols
376 symbols in table
