


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000         ; EXPORT start
    8 00000000         ;start
    9 00000000         
   10 00000000         ;IO1DIR EQU 0xE0028018
   11 00000000         ;IO1SET EQU 0xE0028014
   12 00000000         ;IO1CLR EQU 0xE002801C
   13 00000000         
   14 00000000         ; ldr r1,=IO1DIR
   15 00000000         ; ldr r2,=0x000f0000 ;select P1.19--P1.16
   16 00000000         ; str r2,[r1]  ;make them outputs
   17 00000000         ; ldr r1,=IO1SET
   18 00000000         ; str r2,[r1]  ;set them to turn the LEDs off
   19 00000000         ; ldr r2,=IO1CLR
   20 00000000         ; r1 points to the SET register
   21 00000000         ; r2 points to the CLEAR register
   22 00000000         
   23 00000000         ; ldr r5,=0x00100000 ; end when the mask reaches this va
                       lue
   24 00000000         ;wloop ldr r3,=0x00010000 ; start with P1.16.
   25 00000000         ;floop str r3,[r2]     ; clear the bit -> turn on the LE
                       D
   26 00000000         
   27 00000000         ;delay for about a half second
   28 00000000         ; ldr r4,=4000000
   29 00000000         ;dloop subs r4,r4,#1
   30 00000000         ; bne dloop
   31 00000000         
   32 00000000         ; str r3,[r1]  ;set the bit -> turn off the LED
   33 00000000         ; mov r3,r3,lsl #1 ;shift up to next bit. P1.16 -> P1.17
                        etc.
   34 00000000         ; cmp r3,r5
   35 00000000         ; bne floop
   36 00000000         ; b wloop
   37 00000000         ;stop B stop
   38 00000000         
   39 00000000         ; END
   40 00000000         
   41 00000000                 EXPORT           start
   42 00000000         start
   43 00000000         
   44 00000000 FFFFEB43 
                       sample1 EQU              0xFFFFEB43  ;=1049
   45 00000000 FFFFFBE7 
                       sample2 EQU              0xFFFFFBE7  ;=-1049
   46 00000000 000062DA 
                       sample3 EQU              0x000062DA  ;=25306
   47 00000000         
   48 00000000 00040000 
                       RESULT_ADD
                               EQU              0x00040000
   49 00000000         
   50 00000000 E0028018 



ARM Macro Assembler    Page 2 


                       IO1DIR  EQU              0xE0028018
   51 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   52 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   53 00000000         
   54 00000000         
   55 00000000         start_light
   56 00000000         ;LDR R6,=RESULT_ADD
   57 00000000 E3A0B000        MOV              R11,#0      ;R11: 0 = the numbe
                                                            r is positive, 1 = 
                                                            number is negative
   58 00000004 E3A05000        MOV              R5,#0       ;counter of digits
   59 00000008 E59FC21C        LDR              R12,=sample1 ;r12= original num
                                                            ber
   60 0000000C E20C9102        AND              R9,R12,#0x80000000
   61 00000010 E3590102        CMP              R9,#0x80000000
   62 00000014 1A000003        BNE              positive_number
   63 00000018 E1A0000C        MOV              R0,R12
   64 0000001C EB00007B        BL               negative_number
   65 00000020 E1A0C000        MOV              R12,R0
   66 00000024 E3A0B001        MOV              R11,#1
   67 00000028         positive_number
   68 00000028 E1A0000C        MOV              R0,R12      ;r0 = numerator
   69 0000002C         while_digit                          ;check the number o
                                                            f digits
   70 0000002C E3A0100A        MOV              r1,#10      ;r1 = 10(divisor)
   71 00000030 E2855001        ADD              R5,R5,#1
   72 00000034 EB000062        BL               UDIV0
   73 00000038 E3500000        CMP              R0,#0
   74 0000003C 1AFFFFFA        BNE              while_digit
   75 00000040         
   76 00000040 E35B0001        CMP              R11,#1
   77 00000044 1A00000F        BNE              pushing
   78 00000048 E59F11E0        ldr              r1,=IO1DIR
   79 0000004C E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   80 00000050 E5812000        str              r2,[r1]     ;make them outputs
   81 00000054 E59F11D8        ldr              r1,=IO1SET
   82 00000058 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   83 0000005C E59F21D4        ldr              r2,=IO1CLR
   84 00000060         ; r1 points to the SET register
   85 00000060         ; r2 points to the CLEAR register   
   86 00000060 E3A03801        ldr              r3,=0x00010000 
                                                            ; start with P1.16.
                                                            
   87 00000064 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED at 
                                                            P1.16
   88 00000068 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.16 -> P1.17
                                                             etc.
   89 0000006C E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.17 -> P1.18
                                                             etc.
   90 00000070 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED at 
                                                            P1.18



ARM Macro Assembler    Page 3 


   91 00000074 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.18 -> P1.19
                                                             etc.
   92 00000078 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED P1.
                                                            19
   93 0000007C         
   94 0000007C E59F41B8        ldr              r4,=16000000
   95 00000080 E2544001 
                       n_loop  subs             r4,r4,#1
   96 00000084 1AFFFFFD        bne              n_loop
   97 00000088         
   98 00000088         
   99 00000088         
  100 00000088         pushing
  101 00000088 E3550000        CMP              R5,#0
  102 0000008C 0A000034        BEQ              blank_time  ;end_pushing
  103 00000090 E1A00005        MOV              R0,R5       ;R0 = parameter for
                                                             divisor subroutine
                                                            
  104 00000094 EB00003D        BL               divisor
  105 00000098 E1A07000        MOV              R7,R0       ;R7 = divisor
  106 0000009C E1A01000        MOV              R1,R0       ;R1 = parameter div
                                                            isor for UDIV subro
                                                            utine
  107 000000A0 E1A0000C        MOV              R0,R12      ;R0 = parameter num
                                                            erator for UDIV sub
                                                            routine
  108 000000A4 EB000046        BL               UDIV0
  109 000000A8 E1A06000        MOV              R6,R0       ;R6 = quotinent
  110 000000AC         
  111 000000AC         
  112 000000AC         
  113 000000AC E59F117C        ldr              r1,=IO1DIR
  114 000000B0 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
  115 000000B4 E5812000        str              r2,[r1]     ;make them outputs
  116 000000B8 E59F1174        ldr              r1,=IO1SET
  117 000000BC E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  118 000000C0 E59F2170        ldr              r2,=IO1CLR
  119 000000C4         ; r1 points to the SET register
  120 000000C4         ; r2 points to the CLEAR register
  121 000000C4         
  122 000000C4 E3A03801        ldr              r3,=0x00010000 
                                                            ; start with P1.16.
                                                            
  123 000000C8 E1A0A003        MOV              R10,R3
  124 000000CC         
  125 000000CC         
  126 000000CC E200900F        AND              R9,R0,#0x0000000F
  127 000000D0 E3590000        CMP              R9,#0x00000000
  128 000000D4 0A000015        BEQ              lightall    ;the number is 0
  129 000000D8 E0060697        MUL              R6,R7,R6    ;R6 = quotinent * d
                                                            ivisor
  130 000000DC E04CC006        SUB              R12,R12,R6  ;original number -=
                                                             quotinent * diviso
                                                            r
  131 000000E0         firstbit



ARM Macro Assembler    Page 4 


  132 000000E0 E2009008        AND              R9,R0,#0x00000008 ;
  133 000000E4 E3590008        CMP              R9,#0x00000008
  134 000000E8 1A000000        BNE              secondbit
  135 000000EC E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  136 000000F0         secondbit
  137 000000F0 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.16 -> P1.17
                                                             etc.
  138 000000F4 E2009004        AND              R9,R0,#0x00000004
  139 000000F8 E3590004        CMP              R9,#0x00000004
  140 000000FC 1A000000        BNE              thirdbit
  141 00000100 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  142 00000104         thirdbit
  143 00000104 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.17 -> P1.18
                                                             etc.
  144 00000108 E2009002        AND              R9,R0,#0x00000002
  145 0000010C E3590002        CMP              R9,#0x00000002
  146 00000110 1A000000        BNE              fourthbit
  147 00000114 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  148 00000118         fourthbit
  149 00000118 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.18 -> P1.19
                                                             etc.
  150 0000011C E2009001        AND              R9,R0,#0x00000001
  151 00000120 E3590001        CMP              R9,#0x00000001
  152 00000124 1A000008        BNE              time_count
  153 00000128 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  154 0000012C EA000006        B                time_count
  155 00000130         
  156 00000130         lightall
  157 00000130 E3A09004        MOV              R9,#4
  158 00000134         lightall_2
  159 00000134 E3590000        CMP              R9,#0
  160 00000138 0A000003        BEQ              time_count
  161 0000013C E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  162 00000140 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.16 -> P1.17
                                                             etc.
  163 00000144 E2499001        SUB              R9,R9,#1
  164 00000148 EAFFFFF9        B                lightall_2
  165 0000014C         
  166 0000014C         time_count
  167 0000014C         ;delay for about a half second
  168 0000014C E59F40E8        ldr              r4,=16000000
  169 00000150 E2544001 
                       dloop   subs             r4,r4,#1
  170 00000154 1AFFFFFD        bne              dloop
  171 00000158         
  172 00000158 E1A0300A        MOV              R3,R10
  173 0000015C         ;B   while_light
  174 0000015C         
  175 0000015C         ;end_light
  176 0000015C         



ARM Macro Assembler    Page 5 


  177 0000015C E2455001        SUB              R5,R5,#1
  178 00000160 EAFFFFC8        B                pushing
  179 00000164         
  180 00000164         
  181 00000164         blank_time
  182 00000164 E59F10C4        ldr              r1,=IO1DIR
  183 00000168 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
  184 0000016C E5812000        str              r2,[r1]     ;make them outputs
  185 00000170 E59F10BC        ldr              r1,=IO1SET
  186 00000174 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  187 00000178 E59F20B8        ldr              r2,=IO1CLR
  188 0000017C         time_count_for_blank
  189 0000017C         ;delay for about a half second
  190 0000017C E59F40B8        ldr              r4,=16000000
  191 00000180 E2544001 
                       blankloop
                               subs             r4,r4,#1
  192 00000184 1AFFFFFD        bne              blankloop
  193 00000188 EAFFFF9C        B                start_light
  194 0000018C         
  195 0000018C         
  196 0000018C EAFFFFFE 
                       stop    B                stop
  197 00000190         
  198 00000190         
  199 00000190         
  200 00000190         ;divisor subroutine
  201 00000190         ;parameter
  202 00000190         ; R0 = number
  203 00000190         ;return
  204 00000190         ; R0 = 10 ^ number
  205 00000190         divisor
  206 00000190         ;STMFD SP ! , {R4-R13 , LR}
  207 00000190 E92D5FF0        STMFD            SP!,{R4-R12,LR}
  208 00000194         ;PUSH {R4-R13, LR}
  209 00000194         ;MOV R4,R0
  210 00000194 E3500001        CMP              R0,#1
  211 00000198 0A000007        BEQ              divisor_is_1
  212 0000019C E2404001        SUB              R4,R0,#1
  213 000001A0 E3A00001        MOV              R0,#1
  214 000001A4 E3A0500A        MOV              R5,#10
  215 000001A8         whi_div
  216 000001A8 E0000095        MUL              R0,R5,R0
  217 000001AC E2444001        SUB              R4,R4,#1
  218 000001B0 E3540000        CMP              R4,#0
  219 000001B4 1AFFFFFB        BNE              whi_div
  220 000001B8         divisor_end
  221 000001B8         ;LDMFD SP ! , {R4-R13 , PC}
  222 000001B8 E8BD9FF0        LDMFD            SP!,{R4-R12,PC}
  223 000001BC         ;POP {R4-R13, LR}
  224 000001BC         divisor_is_1
  225 000001BC E3A00001        MOV              R0,#1
  226 000001C0 EAFFFFFC        B                divisor_end
  227 000001C4         
  228 000001C4         
  229 000001C4         
  230 000001C4         ;division subroutine



ARM Macro Assembler    Page 6 


  231 000001C4         ;parameter
  232 000001C4         ;  R0 = N (numerator)
  233 000001C4         ;  R1 = D (divisor)
  234 000001C4         ;return
  235 000001C4         ;  R0 = Q (quotient)
  236 000001C4         ;  R1 = R (reminder)
  237 000001C4         ;
  238 000001C4         UDIV0
  239 000001C4         ;PUSH {R4, R5, R6, LR} ; push R4, R5, R6 and return addr
                       ess
  240 000001C4 E92D5FF0        STMFD            SP ! , {R4-R12 , LR}
  241 000001C8         ;PUSH {R4-R13, LR}
  242 000001C8 E1A02000        MOV              R2, R0      ; R2 = N
  243 000001CC E1A03001        MOV              R3, R1      ; R3 = D
  244 000001D0 E3A00000        MOV              R0, #0      ; R0 = Q = 0
  245 000001D4 E3A01000        MOV              R1, #0      ; R1 = R = 0
  246 000001D8 E3A0401F        MOV              R4, #31     ; R4 = i = 31
  247 000001DC E3A05001        MOV              R5, #1      ; R5 = 1 (used as a
                                                             mask)
  248 000001E0         UDIV1
  249 000001E0 E3540000        CMP              R4, #0      ; i == 0 ?
  250 000001E4 BA000008        BLT              UDIV3       ; finished
  251 000001E8 E1A01081        MOV              R1, R1, LSL #1 ; R = R << 1
  252 000001EC E0056432        AND              R6, R5, R2, LSR R4 
                                                            ; R[0] = N[i]
  253 000001F0 E1811006        ORR              R1, R1, R6  ;
  254 000001F4 E1510003        CMP              R1, R3      ; R >= D?
  255 000001F8 BA000001        BLT              UDIV2       ;
  256 000001FC E0411003        SUB              R1, R1, R3  ; R = R - D
  257 00000200 E1800415        ORR              R0, R0, R5, LSL R4 ; Q[i] = 1
  258 00000204         UDIV2
  259 00000204 E2444001        SUB              R4, R4, #1  ; i = i - 1
  260 00000208 EAFFFFF4        B                UDIV1       ; next bit
  261 0000020C         UDIV3
  262 0000020C         ;POP {R4, R5, R6, PC} ; pop into R4, R5, R6 and return
  263 0000020C E8BD9FF0        LDMFD            SP ! , {R4-R12 , PC}
  264 00000210         ;POP {R4-R13, LR}
  265 00000210         
  266 00000210         
  267 00000210         ;negative_number subroutine
  268 00000210         ;parameter
  269 00000210         ; R0: the original minus number
  270 00000210         ;return
  271 00000210         ; R0: the modified number
  272 00000210         negative_number
  273 00000210 E92D5FF0        STMFD            SP ! , {R4-R12 , LR}
  274 00000214 E1A04000        MOV              R4,R0       ;
  275 00000218 E3E05000        MOV              R5,#0xFFFFFFFF ;
  276 0000021C E0244005        EOR              R4,R4,R5
  277 00000220 E2844001        ADD              R4,R4,#1
  278 00000224 E1A00004        MOV              R0,R4
  279 00000228 E8BD9FF0        LDMFD            SP ! , {R4-R12 , PC}
  280 0000022C         
  281 0000022C         
  282 0000022C                 END
              FFFFEB43 
              E0028018 
              E0028014 
              E002801C 



ARM Macro Assembler    Page 7 


              00F42400 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
UDIV0 000001C4

Symbol: UDIV0
   Definitions
      At line 238 in file App.s
   Uses
      At line 72 in file App.s
      At line 108 in file App.s

UDIV1 000001E0

Symbol: UDIV1
   Definitions
      At line 248 in file App.s
   Uses
      At line 260 in file App.s
Comment: UDIV1 used once
UDIV2 00000204

Symbol: UDIV2
   Definitions
      At line 258 in file App.s
   Uses
      At line 255 in file App.s
Comment: UDIV2 used once
UDIV3 0000020C

Symbol: UDIV3
   Definitions
      At line 261 in file App.s
   Uses
      At line 250 in file App.s
Comment: UDIV3 used once
blank_time 00000164

Symbol: blank_time
   Definitions
      At line 181 in file App.s
   Uses
      At line 102 in file App.s
Comment: blank_time used once
blankloop 00000180

Symbol: blankloop
   Definitions
      At line 191 in file App.s
   Uses
      At line 192 in file App.s
Comment: blankloop used once
divisor 00000190




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: divisor
   Definitions
      At line 205 in file App.s
   Uses
      At line 104 in file App.s
Comment: divisor used once
divisor_end 000001B8

Symbol: divisor_end
   Definitions
      At line 220 in file App.s
   Uses
      At line 226 in file App.s
Comment: divisor_end used once
divisor_is_1 000001BC

Symbol: divisor_is_1
   Definitions
      At line 224 in file App.s
   Uses
      At line 211 in file App.s
Comment: divisor_is_1 used once
dloop 00000150

Symbol: dloop
   Definitions
      At line 169 in file App.s
   Uses
      At line 170 in file App.s
Comment: dloop used once
firstbit 000000E0

Symbol: firstbit
   Definitions
      At line 131 in file App.s
   Uses
      None
Comment: firstbit unused
fourthbit 00000118

Symbol: fourthbit
   Definitions
      At line 148 in file App.s
   Uses
      At line 146 in file App.s
Comment: fourthbit used once
lightall 00000130

Symbol: lightall
   Definitions
      At line 156 in file App.s
   Uses
      At line 128 in file App.s
Comment: lightall used once
lightall_2 00000134

Symbol: lightall_2
   Definitions
      At line 158 in file App.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 164 in file App.s
Comment: lightall_2 used once
n_loop 00000080

Symbol: n_loop
   Definitions
      At line 95 in file App.s
   Uses
      At line 96 in file App.s
Comment: n_loop used once
negative_number 00000210

Symbol: negative_number
   Definitions
      At line 272 in file App.s
   Uses
      At line 64 in file App.s
Comment: negative_number used once
positive_number 00000028

Symbol: positive_number
   Definitions
      At line 67 in file App.s
   Uses
      At line 62 in file App.s
Comment: positive_number used once
pushing 00000088

Symbol: pushing
   Definitions
      At line 100 in file App.s
   Uses
      At line 77 in file App.s
      At line 178 in file App.s

secondbit 000000F0

Symbol: secondbit
   Definitions
      At line 136 in file App.s
   Uses
      At line 134 in file App.s
Comment: secondbit used once
start 00000000

Symbol: start
   Definitions
      At line 42 in file App.s
   Uses
      At line 41 in file App.s
Comment: start used once
start_light 00000000

Symbol: start_light
   Definitions
      At line 55 in file App.s
   Uses
      At line 193 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: start_light used once
stop 0000018C

Symbol: stop
   Definitions
      At line 196 in file App.s
   Uses
      At line 196 in file App.s
Comment: stop used once
thirdbit 00000104

Symbol: thirdbit
   Definitions
      At line 142 in file App.s
   Uses
      At line 140 in file App.s
Comment: thirdbit used once
time_count 0000014C

Symbol: time_count
   Definitions
      At line 166 in file App.s
   Uses
      At line 152 in file App.s
      At line 154 in file App.s
      At line 160 in file App.s

time_count_for_blank 0000017C

Symbol: time_count_for_blank
   Definitions
      At line 188 in file App.s
   Uses
      None
Comment: time_count_for_blank unused
whi_div 000001A8

Symbol: whi_div
   Definitions
      At line 215 in file App.s
   Uses
      At line 219 in file App.s
Comment: whi_div used once
while_digit 0000002C

Symbol: while_digit
   Definitions
      At line 69 in file App.s
   Uses
      At line 74 in file App.s
Comment: while_digit used once
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 52 in file App.s
   Uses
      At line 83 in file App.s
      At line 118 in file App.s
      At line 187 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 50 in file App.s
   Uses
      At line 78 in file App.s
      At line 113 in file App.s
      At line 182 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 51 in file App.s
   Uses
      At line 81 in file App.s
      At line 116 in file App.s
      At line 185 in file App.s

RESULT_ADD 00040000

Symbol: RESULT_ADD
   Definitions
      At line 48 in file App.s
   Uses
      None
Comment: RESULT_ADD unused
sample1 FFFFEB43

Symbol: sample1
   Definitions
      At line 44 in file App.s
   Uses
      At line 59 in file App.s
Comment: sample1 used once
sample2 FFFFFBE7

Symbol: sample2
   Definitions
      At line 45 in file App.s
   Uses
      None
Comment: sample2 unused
sample3 000062DA

Symbol: sample3
   Definitions
      At line 46 in file App.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: sample3 unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
371 symbols in table
