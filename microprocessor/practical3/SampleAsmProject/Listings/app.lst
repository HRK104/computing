


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   11 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   12 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   13 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   14 00000000         
   15 00000000         ;start
   16 00000000         
   17 00000000         ;IO1DIR EQU 0xE0028018
   18 00000000         ;IO1SET EQU 0xE0028014
   19 00000000         ;IO1CLR EQU 0xE002801C
   20 00000000         
   21 00000000         ; ldr r1,=IO1DIR
   22 00000000         ; ldr r2,=0x000f0000 ;select P1.19--P1.16
   23 00000000         ; str r2,[r1]  ;make them outputs
   24 00000000         ; ldr r1,=IO1SET
   25 00000000         ; str r2,[r1]  ;set them to turn the LEDs off
   26 00000000         ; ldr r2,=IO1CLR
   27 00000000         ; r1 points to the SET register
   28 00000000         ; r2 points to the CLEAR register
   29 00000000         
   30 00000000         ; ldr r5,=0x00100000 ; end when the mask reaches this va
                       lue
   31 00000000         ;wloop ldr r3,=0x00010000 ; start with P1.16.
   32 00000000         ;floop str r3,[r2]     ; clear the bit -> turn on the LE
                       D
   33 00000000         
   34 00000000         ;delay for about a half second
   35 00000000         ; ldr r4,=4000000
   36 00000000         ;dloop subs r4,r4,#1
   37 00000000         ; bne dloop
   38 00000000         
   39 00000000         ; str r3,[r1]  ;set the bit -> turn off the LED
   40 00000000         ; mov r3,r3,lsl #1 ;shift up to next bit. P1.16 -> P1.17
                        etc.
   41 00000000         ; cmp r3,r5
   42 00000000         ; bne floop
   43 00000000         ; b wloop
   44 00000000         ;stop B stop
   45 00000000         
   46 00000000         
   47 00000000         
   48 00000000         
   49 00000000         
   50 00000000         start_clac
   51 00000000 EB0000B6        BL               All_LED_OFF



ARM Macro Assembler    Page 2 


   52 00000004         
   53 00000004         
   54 00000004 E59F1310        ldr              r1,=IO1DIR
   55 00000008 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   56 0000000C E5812000        str              r2,[r1]     ;make them outputs
   57 00000010 E59F1308        ldr              r1,=IO1SET
   58 00000014 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   59 00000018 E59F2304        ldr              r2,=IO1CLR
   60 0000001C         
   61 0000001C E3A0C801        ldr              r12,=0x00010000 
                                                            ; start with P1.16.
                                                            
   62 00000020         
   63 00000020         
   64 00000020 E3A02000        MOV              R2,#0       ;the current displa
                                                            yed number
   65 00000024 E3A03000        MOV              R3,#0       ;the calculated num
                                                            ber
   66 00000028         
   67 00000028         
   68 00000028 E59F12F8        LDR              R1,=IO1PIN
   69 0000002C         waitingForPressed
   70 0000002C         ;MOV R4,#4
   71 0000002C         ;gotoP1_20   
   72 0000002C         ;   CMP R4,#0
   73 0000002C         ;   mov r12,r12,lsl #1 ;shift up to next bit.   e.g) P1.
                       16 -> P1.17 etc.
   74 0000002C         ;   SUB  R4,R4,#1
   75 0000002C         ;   BNE gotoP1_20
   76 0000002C         ;r3: P1.20  the most left button
   77 0000002C E5915000        LDR              R5,[r1]
   78 00000030 E2056601        AND              R6,R5,#0x00100000
   79 00000034 E3560000        CMP              R6,#0
   80 00000038         ;BNE  pressed_mostLeft
   81 00000038         ;BEQ  pressed_mostLeft
   82 00000038 1A000000        BNE              check_P1_21
   83 0000003C EB00004D        BL               pressed_mostLeft2
   84 00000040         check_P1_21
   85 00000040         ;   mov r12,r12,lsl #1 ;shift up to next bit.   e.g) P1.
                       20 -> P1.21 etc. the second most left button
   86 00000040 E5915000        LDR              R5,[r1]
   87 00000044 E2056602        AND              R6,R5,#0x00200000
   88 00000048 E3560000        CMP              R6,#0
   89 0000004C         ;BEQ  pressed_secondmostLeft
   90 0000004C 1A000000        BNE              check_P1_22
   91 00000050 EB000028        BL               pressed_secondmostLeft2
   92 00000054         check_P1_22
   93 00000054         ;   mov r12,r12,lsl #1 ;shift up to next bit.   e.g) P1.
                       21 -> P1.22 etc. the second most right button
   94 00000054 E5915000        LDR              R5,[r1]
   95 00000058 E2056501        AND              R6,R5,#0x00400000
   96 0000005C E3560000        CMP              R6,#0
   97 00000060         ;BEQ  pressed_secondmostRight
   98 00000060 1A000000        BNE              check_P1_23
   99 00000064 EB00001A        BL               pressed_secondmostRight2
  100 00000068         check_P1_23
  101 00000068         ;   mov r12,r12,lsl #1 ;shift up to next bit.   e.g) P1.



ARM Macro Assembler    Page 3 


                       22 -> P1.23 etc. the most right button
  102 00000068 E5915000        LDR              R5,[r1]
  103 0000006C E2056502        AND              R6,R5,#0x00800000
  104 00000070 E3560000        CMP              R6,#0
  105 00000074         ;BNE  pressed_mostRight
  106 00000074         ;BEQ  pressed_mostRight
  107 00000074         ;BNE  endLoop
  108 00000074 0A000000        BEQ              endLoop
  109 00000078 EA000002        B                pressed_mostRight ;BNE
  110 0000007C         endLoop
  111 0000007C E1A0B00A        MOV              R11,R10
  112 00000080 E1A0A00B        MOV              R10,R11
  113 00000084         
  114 00000084 EAFFFFE8        B                waitingForPressed
  115 00000088         
  116 00000088         ;stop B stop
  117 00000088         
  118 00000088         pressed_mostRight
  119 00000088 E3520007        CMP              R2,#7
  120 0000008C 0A000004        BEQ              pressed_mostRight_next
  121 00000090 E2822001        ADD              R2,R2,#1
  122 00000094 E1A08000        MOV              R8,R0       ;R3(tmp) = R0
  123 00000098 E1A00002        MOV              R0,R2       ;R0 = the current n
                                                            umber
  124 0000009C EB00005E        BL               expressNumber
  125 000000A0 E1A00008        MOV              R0,R8
  126 000000A4         pressed_mostRight_next
  127 000000A4 E59F7280        ldr              r7,=16000000
  128 000000A8         while_mostRight
  129 000000A8 E2056502        AND              R6,R5,#0x00800000
  130 000000AC         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;CMP  R6,#0
  131 000000AC         ;BEQ  while_mostRight
  132 000000AC E3560000        CMP              R6,#0
  133 000000B0 0AFFFFFC        BEQ              while_mostRight
  134 000000B4 EB000000        BL               pressed_mostRight2
  135 000000B8 EAFFFFDB        B                waitingForPressed
  136 000000BC         
  137 000000BC         
  138 000000BC         ;pressed_mostRight subroutine
  139 000000BC         ;   :adding the current displayed number
  140 000000BC         ;parameter 
  141 000000BC         ; R2: the current displayed number
  142 000000BC         pressed_mostRight2
  143 000000BC         
  144 000000BC E92D5FF0        STMFD            SP!,{R4-R12,LR}
  145 000000C0         ;CMP R2,#7
  146 000000C0         ;BEQ end_pressed_mostRight2
  147 000000C0         ;ADD R2,R2,#1
  148 000000C0 E1A03000        MOV              R3,R0       ;R3(tmp) = R0
  149 000000C4 E1A00002        MOV              R0,R2       ;R0 = the current n
                                                            umber
  150 000000C8 EB000053        BL               expressNumber
  151 000000CC         end_pressed_mostRight2
  152 000000CC E1A00003        MOV              R0,R3       ;R0 = tmp
  153 000000D0 E8BD9FF0        LDMFD            SP!,{R4-R12,PC}
  154 000000D4         
  155 000000D4         
  156 000000D4         ;pressed_secondmostRight subroutine



ARM Macro Assembler    Page 4 


  157 000000D4         ;   :subtracting the current displayed number
  158 000000D4         ;parameter 
  159 000000D4         ; R2: the current displayed number
  160 000000D4         pressed_secondmostRight2
  161 000000D4 E92D5FF0        STMFD            SP!,{R4-R12,LR}
  162 000000D8 E3520008        CMP              R2,#0x00000008
  163 000000DC 0A000003        BEQ              end_pressed_secondmostRight2
  164 000000E0 E2422001        SUB              R2,R2,#1
  165 000000E4 E1A03000        MOV              R3,R0       ;R3(tmp) = R0
  166 000000E8 E1A00002        MOV              R0,R2       ;R0 = the current n
                                                            umber
  167 000000EC EB00004A        BL               expressNumber
  168 000000F0         end_pressed_secondmostRight2
  169 000000F0 E1A00003        MOV              R0,R3       ;R0 = tmp
  170 000000F4 E8BD9FF0        LDMFD            SP!,{R4-R12,PC}
  171 000000F8         
  172 000000F8         
  173 000000F8         ;pressed_secondmostLeft subroutine
  174 000000F8         ;    :adding the current displaed number to the calculat
                       ed number
  175 000000F8         ;parameter
  176 000000F8         ; R2: the cuurent displayed number
  177 000000F8         ; R3: the calculated number
  178 000000F8         ;return 
  179 000000F8         ; R0: the current displayed number (=0)
  180 000000F8         ; R1: the calculated number
  181 000000F8         pressed_secondmostLeft2
  182 000000F8         ;delay for about a half second
  183 000000F8         ;ldr r8,=4000000
  184 000000F8         ;dloop subs r8,r8,#1
  185 000000F8         ;bne dloop
  186 000000F8         ;LDR  R5,[r1]
  187 000000F8         ;AND  R6,R5,r12
  188 000000F8         ;CMP  R6,#0
  189 000000F8         ;BEQ  pressed_secondmostLeft
  190 000000F8         
  191 000000F8         
  192 000000F8 E92D5FF0        STMFD            SP!,{R4-R12,LR}
  193 000000FC E3A04008        MOV              R4,#0x00000008
  194 00000100 E0025004        AND              R5,R2,R4    ;most significant b
                                                            it of the current n
                                                            umber
  195 00000104 E0036004        AND              R6,R3,R4    ;most significant b
                                                            it of the calculate
                                                            d number
  196 00000108 E1550004        CMP              R5,R4
  197 0000010C 0A000003        BEQ              checkOvernegative_add ;the curr
                                                            ent number < 0
  198 00000110 E1560004        CMP              R6,R4
  199 00000114 1A00000B        BNE              checkOverPositive_add
  200 00000118 E0833002        ADD              R3,R3,R2    ;the calculated num
                                                            ber += the current 
                                                            displayed number
  201 0000011C EA00000F        B                end_pressed_secondmostLeft2
  202 00000120         
  203 00000120         checkOvernegative_add
  204 00000120 E1560004        CMP              R6,R4
  205 00000124 0A000001        BEQ              checkOvernegative_add2 ; (the c
                                                            urrent number < 0) 



ARM Macro Assembler    Page 5 


                                                            && (the calculated 
                                                            number<0)
  206 00000128 E0833002        ADD              R3,R3,R2    ;the calculated num
                                                            ber += the current 
                                                            displayed number
  207 0000012C EA00000B        B                end_pressed_secondmostLeft2
  208 00000130         checkOvernegative_add2               ; (the current numb
                                                            er < 0) && (the cal
                                                            culated number<0)
  209 00000130 E0833002        ADD              R3,R3,R2    ;the calculated num
                                                            ber += the current 
                                                            displayed number
  210 00000134 E0037004        AND              R7,R3,R4
  211 00000138 E1570004        CMP              R7,R4
  212 0000013C 0A000007        BEQ              end_pressed_secondmostLeft2
  213 00000140 E3A07008        MOV              R7,#0x00000008 ;the calculated 
                                                            number <-8, thus ma
                                                            ke the calculated n
                                                            umber = -8
  214 00000144 EA000005        B                end_pressed_secondmostLeft2
  215 00000148         
  216 00000148         checkOverPositive_add
  217 00000148 E0833002        ADD              R3,R3,R2    ;the calculated num
                                                            ber += the current 
                                                            displayed number
  218 0000014C E0037004        AND              R7,R3,R4
  219 00000150 E1570004        CMP              R7,R4
  220 00000154 1A000001        BNE              end_pressed_secondmostLeft2
  221 00000158 E3A03007        MOV              R3,#7       ;the calculated num
                                                            ber >7, thus make t
                                                            he calculated numbe
                                                            r = 7
  222 0000015C EAFFFFFF        B                end_pressed_secondmostLeft2
  223 00000160         end_pressed_secondmostLeft2
  224 00000160 E1A09000        MOV              R9,R0
  225 00000164 E1A00003        MOV              R0,R3
  226 00000168 EB00002B        BL               expressNumber
  227 0000016C E1A00009        MOV              R0,R9
  228 00000170 E3A02000        MOV              R2,#0
  229 00000174 E8BD9FF0        LDMFD            SP!,{R4-R12,PC}
  230 00000178         
  231 00000178         
  232 00000178         
  233 00000178         
  234 00000178         ;pressed_mostLeft subroutine
  235 00000178         ;    :adding the current displaed number to the calculat
                       ed number
  236 00000178         ;parameter
  237 00000178         ; R2: the cuurent displayed number
  238 00000178         ; R3: the calculated number
  239 00000178         ;return 
  240 00000178         ; R2: the current displayed number (=0)
  241 00000178         ; R3: the calculated number
  242 00000178         pressed_mostLeft2
  243 00000178 E2822001        ADD              R2,R2,#1
  244 0000017C E92D5FF0        STMFD            SP!,{R4-R12,LR}
  245 00000180 E3A04008        MOV              R4,#0x00000008
  246 00000184 E0025004        AND              R5,R2,R4    ;most significant b
                                                            it of the current n



ARM Macro Assembler    Page 6 


                                                            umber
  247 00000188 E0036004        AND              R6,R3,R4    ;most significant b
                                                            it of the calculate
                                                            d number
  248 0000018C E1550004        CMP              R5,R4
  249 00000190 0A000001        BEQ              checkOvernegative_sub ;the curr
                                                            ent number < 0
  250 00000194 E0433002        SUB              R3,R3,R2    ;the calculated num
                                                            ber -= the current 
                                                            displayed number
  251 00000198 EA000009        B                end_pressed_mostLeft2
  252 0000019C         
  253 0000019C         checkOvernegative_sub
  254 0000019C E1560004        CMP              R6,R4
  255 000001A0 0A000001        BEQ              checkOvernegative_sub2 ; (the c
                                                            urrent number < 0) 
                                                            && (the calculated 
                                                            number<0)
  256 000001A4 E0433002        SUB              R3,R3,R2    ;the calculated num
                                                            ber -= the current 
                                                            displayed number
  257 000001A8 EA000005        B                end_pressed_mostLeft2
  258 000001AC         checkOvernegative_sub2               ; (the current numb
                                                            er < 0) && (the cal
                                                            culated number<0)
  259 000001AC E0433002        SUB              R3,R3,R2    ;the calculated num
                                                            ber -= the current 
                                                            displayed number
  260 000001B0 E0037004        AND              R7,R3,R4
  261 000001B4 E1570004        CMP              R7,R4
  262 000001B8 0A000001        BEQ              end_pressed_mostLeft2
  263 000001BC E3A07008        MOV              R7,#0x00000008 ;the calculated 
                                                            number <-8, thus ma
                                                            ke the calculated n
                                                            umber = -8
  264 000001C0 EAFFFFFF        B                end_pressed_mostLeft2
  265 000001C4         
  266 000001C4         end_pressed_mostLeft2
  267 000001C4 E1A09000        MOV              R9,R0
  268 000001C8 E1A00003        MOV              R0,R3
  269 000001CC EB000012        BL               expressNumber
  270 000001D0 E1A00009        MOV              R0,R9
  271 000001D4 E3A02000        MOV              R2,#0
  272 000001D8 E8BD9FF0        LDMFD            SP!,{R4-R12,PC}
  273 000001DC         
  274 000001DC         
  275 000001DC         
  276 000001DC         ;afterCulculate subroutine
  277 000001DC         ;    : display the result of the last calculation, if an
                       y, until one of the rightmost two buttons is pressed. 
  278 000001DC         ;      The first press of either of those buttons should
                        clear the display.
  279 000001DC         ;return
  280 000001DC         ; R0:the current number (=0)
  281 000001DC         ; R1:the calculated number (=0)
  282 000001DC         afterCulculate
  283 000001DC E92D5FF0        STMFD            SP!,{R4-R12,LR}
  284 000001E0         while_afterCalculate
  285 000001E0 E3A04006        MOV              R4,#6



ARM Macro Assembler    Page 7 


  286 000001E4         gotoP1_22
  287 000001E4 E3540000        CMP              R4,#0
  288 000001E8 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit.   e.g) P1.16 -
                                                            > P1.17 etc.
  289 000001EC E2444001        SUB              R4,R4,#1
  290 000001F0 1AFFFFFB        BNE              gotoP1_22
  291 000001F4         ;r3: P1.22  the most left button
  292 000001F4         
  293 000001F4         ;LDR  R5,[r1]
  294 000001F4         ;AND  R6,R5,R3
  295 000001F4         ;CMP  R6,#0
  296 000001F4         ;BEQ  pressed_mostLeft
  297 000001F4         
  298 000001F4         ;mov r3,r3,lsl #1 ;shift up to next bit.   e.g) P1.20 ->
                        P1.21 etc. the second most left button
  299 000001F4         ;LDR  R5,[r1]
  300 000001F4         ;AND  R6,R5,R3
  301 000001F4         ;CMP  R6,#0
  302 000001F4         ;BEQ  pressed_secondmostLeft
  303 000001F4         ;mov r3,r3,lsl #1 ;shift up to next bit.   e.g) P1.21 ->
                        P1.22 etc. the second most right button
  304 000001F4 E5915000        LDR              R5,[r1]
  305 000001F8 E0056003        AND              R6,R5,R3
  306 000001FC E3560000        CMP              R6,#0
  307 00000200 0AFFFF7E        BEQ              start_clac
  308 00000204 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit.   e.g) P1.22 -
                                                            > P1.23 etc. the mo
                                                            st right button
  309 00000208 E5915000        LDR              R5,[r1]
  310 0000020C E0056003        AND              R6,R5,R3
  311 00000210 E3560000        CMP              R6,#0
  312 00000214 0AFFFF79        BEQ              start_clac
  313 00000218 EAFFFFF0        B                while_afterCalculate
  314 0000021C         
  315 0000021C         
  316 0000021C         
  317 0000021C         ;enerNumber subroutine
  318 0000021C         ;return 
  319 0000021C         ; R0: the number the user entered
  320 0000021C         ;enerNumber
  321 0000021C         ;    STMFD SP!,{R4-R12,LR}
  322 0000021C         ; MOV R4,#0
  323 0000021C         
  324 0000021C         
  325 0000021C         ;expressNumber subroutine
  326 0000021C         ;parameter
  327 0000021C         ; R0: the number to be expressed by the LEDs
  328 0000021C         expressNumber
  329 0000021C E92D5FF0        STMFD            SP!,{R4-R12,LR}
  330 00000220 E1A04000        MOV              R4,R0       ;R4 = original numb
                                                            er
  331 00000224 E1A05001        MOV              R5,R1
  332 00000228 E1A06002        MOV              R6,R2
  333 0000022C E1A07003        MOV              R7,R3
  334 00000230         
  335 00000230 E2048102        AND              R8,R4,#0x80000000
  336 00000234 E3580102        CMP              R8,#0x80000000



ARM Macro Assembler    Page 8 


  337 00000238 1A000002        BNE              positive_number
  338 0000023C E1A0000C        MOV              R0,R12
  339 00000240 EB00001F        BL               negative_number
  340 00000244 E1A04000        MOV              R4,R0
  341 00000248         positive_number
  342 00000248 E59F10CC        ldr              r1,=IO1DIR
  343 0000024C E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
  344 00000250 E5812000        str              r2,[r1]     ;make them outputs
  345 00000254 E59F10C4        ldr              r1,=IO1SET
  346 00000258 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  347 0000025C E59F20C0        ldr              r2,=IO1CLR
  348 00000260         ; r1 points to the SET register
  349 00000260         ; r2 points to the CLEAR register
  350 00000260         
  351 00000260 E3A03801        ldr              r3,=0x00010000 
                                                            ; start with P1.16.
                                                            
  352 00000264         ;MOV R10,R3
  353 00000264         
  354 00000264         firstbit
  355 00000264 E2048008        AND              R8,R4,#0x00000008 ;
  356 00000268 E3580008        CMP              R8,#0x00000008
  357 0000026C 1A000000        BNE              secondbit
  358 00000270 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  359 00000274         secondbit
  360 00000274 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.16 -> P1.17
                                                             etc.
  361 00000278 E2048004        AND              R8,R4,#0x00000004
  362 0000027C E3580004        CMP              R8,#0x00000004
  363 00000280 1A000000        BNE              thirdbit
  364 00000284 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  365 00000288         thirdbit
  366 00000288 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.17 -> P1.18
                                                             etc.
  367 0000028C E2048002        AND              R8,R4,#0x00000002
  368 00000290 E3580002        CMP              R8,#0x00000002
  369 00000294 1A000000        BNE              fourthbit
  370 00000298 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  371 0000029C         fourthbit
  372 0000029C E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.18 -> P1.19
                                                             etc.
  373 000002A0 E2048001        AND              R8,R4,#0x00000001
  374 000002A4 E3580001        CMP              R8,#0x00000001
  375 000002A8 1A000000        BNE              end_expressNumber
  376 000002AC E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED
  377 000002B0         end_expressNumber
  378 000002B0 E1A00004        MOV              R0,R4
  379 000002B4 E1A01005        MOV              R1,R5
  380 000002B8 E1A02006        MOV              R2,R6
  381 000002BC E1A03007        MOV              R3,R7



ARM Macro Assembler    Page 9 


  382 000002C0 E8BD9FF0        LDMFD            SP!,{R4-R12,PC}
  383 000002C4         
  384 000002C4         
  385 000002C4         ;negative_number subroutine
  386 000002C4         ;parameter
  387 000002C4         ; R0: the original minus number
  388 000002C4         ;return
  389 000002C4         ; R0: the modified number
  390 000002C4         negative_number
  391 000002C4 E92D5FF0        STMFD            SP ! , {R4-R12 , LR}
  392 000002C8 E1A04000        MOV              R4,R0       ;
  393 000002CC E3E05000        MOV              R5,#0xFFFFFFFF ;
  394 000002D0 E0244005        EOR              R4,R4,R5
  395 000002D4 E2844001        ADD              R4,R4,#1
  396 000002D8 E1A00004        MOV              R0,R4
  397 000002DC E8BD9FF0        LDMFD            SP ! , {R4-R12 , PC}
  398 000002E0         
  399 000002E0         
  400 000002E0         ;All_LED_OFF subroutine
  401 000002E0         All_LED_OFF
  402 000002E0 E92D5FF0        STMFD            SP ! , {R4-R12 , LR}
  403 000002E4         
  404 000002E4 E59F1030        ldr              r1,=IO1DIR
  405 000002E8 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
  406 000002EC E5812000        str              r2,[r1]     ;make them outputs
  407 000002F0 E59F1028        ldr              r1,=IO1SET
  408 000002F4 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  409 000002F8 E59F2024        ldr              r2,=IO1CLR
  410 000002FC         ; r1 points to the SET register
  411 000002FC         ; r2 points to the CLEAR register   
  412 000002FC E3A03801        ldr              r3,=0x00010000 
                                                            ; start with P1.16.
                                                            
  413 00000300 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED at 
                                                            P1.16
  414 00000304 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.16 -> P1.17
                                                             etc.
  415 00000308 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.17 -> P1.18
                                                             etc.
  416 0000030C E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED at 
                                                            P1.18
  417 00000310 E1A03083        mov              r3,r3,lsl #1 ;shift up to next 
                                                            bit. P1.18 -> P1.19
                                                             etc.
  418 00000314 E5823000        str              r3,[r2]     ; clear the bit -> 
                                                            turn on the LED P1.
                                                            19
  419 00000318         end_All_LED_OFF
  420 00000318 E8BD9FF0        LDMFD            SP ! , {R4-R12 , PC}
  421 0000031C                 END
              E0028018 
              E0028014 
              E002801C 



ARM Macro Assembler    Page 10 


              E0028010 
              00F42400 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

All_LED_OFF 000002E0

Symbol: All_LED_OFF
   Definitions
      At line 401 in file App.s
   Uses
      At line 51 in file App.s
Comment: All_LED_OFF used once
AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
afterCulculate 000001DC

Symbol: afterCulculate
   Definitions
      At line 282 in file App.s
   Uses
      None
Comment: afterCulculate unused
checkOverPositive_add 00000148

Symbol: checkOverPositive_add
   Definitions
      At line 216 in file App.s
   Uses
      At line 199 in file App.s
Comment: checkOverPositive_add used once
checkOvernegative_add 00000120

Symbol: checkOvernegative_add
   Definitions
      At line 203 in file App.s
   Uses
      At line 197 in file App.s
Comment: checkOvernegative_add used once
checkOvernegative_add2 00000130

Symbol: checkOvernegative_add2
   Definitions
      At line 208 in file App.s
   Uses
      At line 205 in file App.s
Comment: checkOvernegative_add2 used once
checkOvernegative_sub 0000019C

Symbol: checkOvernegative_sub
   Definitions
      At line 253 in file App.s
   Uses
      At line 249 in file App.s
Comment: checkOvernegative_sub used once
checkOvernegative_sub2 000001AC

Symbol: checkOvernegative_sub2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 258 in file App.s
   Uses
      At line 255 in file App.s
Comment: checkOvernegative_sub2 used once
check_P1_21 00000040

Symbol: check_P1_21
   Definitions
      At line 84 in file App.s
   Uses
      At line 82 in file App.s
Comment: check_P1_21 used once
check_P1_22 00000054

Symbol: check_P1_22
   Definitions
      At line 92 in file App.s
   Uses
      At line 90 in file App.s
Comment: check_P1_22 used once
check_P1_23 00000068

Symbol: check_P1_23
   Definitions
      At line 100 in file App.s
   Uses
      At line 98 in file App.s
Comment: check_P1_23 used once
endLoop 0000007C

Symbol: endLoop
   Definitions
      At line 110 in file App.s
   Uses
      At line 108 in file App.s
Comment: endLoop used once
end_All_LED_OFF 00000318

Symbol: end_All_LED_OFF
   Definitions
      At line 419 in file App.s
   Uses
      None
Comment: end_All_LED_OFF unused
end_expressNumber 000002B0

Symbol: end_expressNumber
   Definitions
      At line 377 in file App.s
   Uses
      At line 375 in file App.s
Comment: end_expressNumber used once
end_pressed_mostLeft2 000001C4

Symbol: end_pressed_mostLeft2
   Definitions
      At line 266 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 251 in file App.s
      At line 257 in file App.s
      At line 262 in file App.s
      At line 264 in file App.s

end_pressed_mostRight2 000000CC

Symbol: end_pressed_mostRight2
   Definitions
      At line 151 in file App.s
   Uses
      None
Comment: end_pressed_mostRight2 unused
end_pressed_secondmostLeft2 00000160

Symbol: end_pressed_secondmostLeft2
   Definitions
      At line 223 in file App.s
   Uses
      At line 201 in file App.s
      At line 207 in file App.s
      At line 212 in file App.s
      At line 214 in file App.s
      At line 220 in file App.s
      At line 222 in file App.s

end_pressed_secondmostRight2 000000F0

Symbol: end_pressed_secondmostRight2
   Definitions
      At line 168 in file App.s
   Uses
      At line 163 in file App.s
Comment: end_pressed_secondmostRight2 used once
expressNumber 0000021C

Symbol: expressNumber
   Definitions
      At line 328 in file App.s
   Uses
      At line 124 in file App.s
      At line 150 in file App.s
      At line 167 in file App.s
      At line 226 in file App.s
      At line 269 in file App.s

firstbit 00000264

Symbol: firstbit
   Definitions
      At line 354 in file App.s
   Uses
      None
Comment: firstbit unused
fourthbit 0000029C

Symbol: fourthbit
   Definitions
      At line 371 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 369 in file App.s
Comment: fourthbit used once
gotoP1_22 000001E4

Symbol: gotoP1_22
   Definitions
      At line 286 in file App.s
   Uses
      At line 290 in file App.s
Comment: gotoP1_22 used once
negative_number 000002C4

Symbol: negative_number
   Definitions
      At line 390 in file App.s
   Uses
      At line 339 in file App.s
Comment: negative_number used once
positive_number 00000248

Symbol: positive_number
   Definitions
      At line 341 in file App.s
   Uses
      At line 337 in file App.s
Comment: positive_number used once
pressed_mostLeft2 00000178

Symbol: pressed_mostLeft2
   Definitions
      At line 242 in file App.s
   Uses
      At line 83 in file App.s
Comment: pressed_mostLeft2 used once
pressed_mostRight 00000088

Symbol: pressed_mostRight
   Definitions
      At line 118 in file App.s
   Uses
      At line 109 in file App.s
Comment: pressed_mostRight used once
pressed_mostRight2 000000BC

Symbol: pressed_mostRight2
   Definitions
      At line 142 in file App.s
   Uses
      At line 134 in file App.s
Comment: pressed_mostRight2 used once
pressed_mostRight_next 000000A4

Symbol: pressed_mostRight_next
   Definitions
      At line 126 in file App.s
   Uses
      At line 120 in file App.s
Comment: pressed_mostRight_next used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

pressed_secondmostLeft2 000000F8

Symbol: pressed_secondmostLeft2
   Definitions
      At line 181 in file App.s
   Uses
      At line 91 in file App.s
Comment: pressed_secondmostLeft2 used once
pressed_secondmostRight2 000000D4

Symbol: pressed_secondmostRight2
   Definitions
      At line 160 in file App.s
   Uses
      At line 99 in file App.s
Comment: pressed_secondmostRight2 used once
secondbit 00000274

Symbol: secondbit
   Definitions
      At line 359 in file App.s
   Uses
      At line 357 in file App.s
Comment: secondbit used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
start_clac 00000000

Symbol: start_clac
   Definitions
      At line 50 in file App.s
   Uses
      At line 307 in file App.s
      At line 312 in file App.s

thirdbit 00000288

Symbol: thirdbit
   Definitions
      At line 365 in file App.s
   Uses
      At line 363 in file App.s
Comment: thirdbit used once
waitingForPressed 0000002C

Symbol: waitingForPressed
   Definitions
      At line 69 in file App.s
   Uses
      At line 114 in file App.s
      At line 135 in file App.s

while_afterCalculate 000001E0



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Symbol: while_afterCalculate
   Definitions
      At line 284 in file App.s
   Uses
      At line 313 in file App.s
Comment: while_afterCalculate used once
while_mostRight 000000A8

Symbol: while_mostRight
   Definitions
      At line 128 in file App.s
   Uses
      At line 133 in file App.s
Comment: while_mostRight used once
37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 12 in file App.s
   Uses
      At line 59 in file App.s
      At line 347 in file App.s
      At line 409 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 10 in file App.s
   Uses
      At line 54 in file App.s
      At line 342 in file App.s
      At line 404 in file App.s

IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 13 in file App.s
   Uses
      At line 68 in file App.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 11 in file App.s
   Uses
      At line 57 in file App.s
      At line 345 in file App.s
      At line 407 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
377 symbols in table
