


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 3 - Floating-Point Addition
    4 00000000         ;
    5 00000000         
    6 00000000                 AREA             RESET, CODE, READONLY
    7 00000000                 ENTRY
    8 00000000         
    9 00000000         ;
   10 00000000         ; Test Data
   11 00000000         ;
   12 00000000 41C40000 
                       FP_A    EQU              0x41C40000
   13 00000000 41960000 
                       FP_B    EQU              0x41960000
   14 00000000         
   15 00000000         
   16 00000000         ; initialize system stack pointer (SP)
   17 00000000 E59FD16C        LDR              SP, =0x40010000
   18 00000004         
   19 00000004         
   20 00000004 E59F016C        LDR              R0, =0x40600000
   21 00000008 EB000007        BL               fpdecode
   22 0000000C EB00001A        BL               fpencode
   23 00000010         ;LDR R0, =FP_A
   24 00000010         ;BL  fpdecode
   25 00000010         ;BL  fpencode
   26 00000010         ;LDR R0, =FP_B
   27 00000010         ;BL  fpdecode
   28 00000010         ;BL  fpencode
   29 00000010         
   30 00000010         
   31 00000010 E59F0164        LDR              r0, =FP_A   ; test value A
   32 00000014 E59F1164        LDR              r1, =FP_B   ; test value B
   33 00000018 EB000022        BL               fpadd
   34 0000001C E59F0160        LDR              R0, =0x40700000
   35 00000020 E59F1160        LDR              R1, =0x40A40000
   36 00000024 EB00001F        BL               fpadd
   37 00000028         
   38 00000028         
   39 00000028 EAFFFFFE 
                       stop    B                stop
   40 0000002C         
   41 0000002C         
   42 0000002C         ;
   43 0000002C         ; fpdecode
   44 0000002C         ; decodes an IEEE 754 floating point value to the signed
                        (2's complement)
   45 0000002C         ; fraction and a signed 2's complement (unbiased) expone
                       nt
   46 0000002C         ; parameters:
   47 0000002C         ; r0 - ieee 754 float
   48 0000002C         ; return:
   49 0000002C         ; r0 - fraction (signed 2's complement word)
   50 0000002C         ; r1 - exponent (signed 2's complement word)
   51 0000002C         ;
   52 0000002C         fpdecode
   53 0000002C         
   54 0000002C         ;



ARM Macro Assembler    Page 2 


   55 0000002C         ; your decode subroutine goes here
   56 0000002C         ;
   57 0000002C E92D5FF0        PUSH{R4-R12,LR}
   58 00000030 E1A04000        MOV              R4,R0       ;R4 =  ieee 754 flo
                                                            at
   59 00000034 E3A07000        MOV              R7,#0       ;R7 = (boolean) isP
                                                            ositive 
   60 00000038         fpdecode01
   61 00000038 E3A05102        LDR              R5,=0x80000000
   62 0000003C E0055004        AND              R5,R5,R4
   63 00000040 E1A05FA5        MOV              R5,R5,LSR #31 ;if R5 = 1,  nega
                                                            tive
   64 00000044 E3550000        CMP              R5,#0
   65 00000048 0A000002        BEQ              fpdecode1
   66 0000004C E1E04004        MVN              R4,R4       ;inverse all bits
   67 00000050 E2844001        ADD              R4,R4,#1    ;add 1
   68 00000054 E3A07001        MOV              R7,#1       ;R7 = 1(!isPositive
                                                            ) 
   69 00000058         fpdecode1
   70 00000058 E59F512C        LDR              R5,=0x7F800000 ;R5 = mask for e
                                                            xponent
   71 0000005C E0045005        AND              R5,R4,R5    ;and
   72 00000060 E1A05085        MOV              R5,R5,LSL #1 ;R5<<1
   73 00000064 E1A05C25        MOV              R5,R5,LSR #24 ;R5>>24
   74 00000068 E59F6120        LDR              R6,=0x007FFFFF ;R6 = mask for f
                                                            raction
   75 0000006C E0046006        AND              R6,R4,R6    ;and
   76 00000070         fpdecodeEnd
   77 00000070 E1A00006        MOV              R0,R6       ;R0 = fraction
   78 00000074 E1A01005        MOV              R1,R5       ;R1 = exponent
   79 00000078 E8BD9FF0        POP              {R4-R12, PC}
   80 0000007C         
   81 0000007C         ;
   82 0000007C         ; fpencode
   83 0000007C         ; encodes an IEEE 754 value using a specified fraction a
                       nd exponent
   84 0000007C         ; parameters:
   85 0000007C         ; r0 - fraction (signed 2's complement word)
   86 0000007C         ; r1 - exponent (signed 2's complement word)
   87 0000007C         ;   r2 - sign number
   88 0000007C         ; result:
   89 0000007C         ; r0 - ieee 754 float
   90 0000007C         ;
   91 0000007C         fpencode
   92 0000007C         
   93 0000007C         ;
   94 0000007C         ; your encode subroutine goes here
   95 0000007C         ;
   96 0000007C E92D5FF0        PUSH{R4-R12,LR}
   97 00000080 E1A04000        MOV              R4,R0       ;R4 = fraction
   98 00000084 E1A05001        MOV              R5,R1       ;R5 = exponent
   99 00000088         ;MOV R7,R2           ;R7 = sign number
  100 00000088         fpencode1
  101 00000088 E1A04484        MOV              R4,R4,LSL #9 ;R4 <<9
  102 0000008C E1A044A4        MOV              R4,R4,LSR #9 ;R4 >>9
  103 00000090 E1A05B85        MOV              R5,R5,LSL #23 
                                                            ;R5 = exponent<<23
  104 00000094         ;MOV R7,R7,LSL #31   ;R7 << 31
  105 00000094 E3A06000        LDR              R6,=0x00000000



ARM Macro Assembler    Page 3 


  106 00000098 E1866004        ORR              R6,R6,R4    ;put fraction into 
                                                            R6
  107 0000009C E1866005        ORR              R6,R6,R5    ;put exponent into 
                                                            R6
  108 000000A0         ;ORR R6,R6,R7        ;put sign into R6
  109 000000A0         fpencodeEnd
  110 000000A0 E1A00006        MOV              R0,R6
  111 000000A4 E8BD9FF0        POP              {R4-R12,PC}
  112 000000A8         
  113 000000A8         ;
  114 000000A8         ; fpadd
  115 000000A8         ; adds two IEEE 754 values
  116 000000A8         ; parameters:
  117 000000A8         ; r0 - ieee 754 float A
  118 000000A8         ; r1 - ieee 754 float B
  119 000000A8         ; return:
  120 000000A8         ; r0 - ieee 754 float A+B
  121 000000A8         ;
  122 000000A8         fpadd
  123 000000A8         
  124 000000A8         ;
  125 000000A8         ; your add subroutine goes here
  126 000000A8         ;
  127 000000A8 E92D5FF0        PUSH{R4-R12,LR}
  128 000000AC E1A04000        MOV              R4,R0       ;R4 = float A
  129 000000B0 E1A05001        MOV              R5,R1       ;R5 = float B
  130 000000B4         fpadd1
  131 000000B4 E3A02102        LDR              R2,=0x80000000 ;R2 = mask
  132 000000B8 E0022004        AND              R2,R2,R4
  133 000000BC E1A02FA2        MOV              R2,R2,LSR #31 ;if R2 = 1, float
                                                            A is negative
  134 000000C0 E1A00004        MOV              R0,R4       ;R0 = float A
  135 000000C4 EBFFFFD8        BL               fpdecode    ;go to fpdecode sub
                                                            routine
  136 000000C8 E1A06000        MOV              R6,R0       ;R6 = fraction of f
                                                            loat A
  137 000000CC E1A07001        MOV              R7,R1       ;R7 = exponent of f
                                                            loat A
  138 000000D0         fpadd2
  139 000000D0 E3A03102        LDR              R3,=0x80000000 ;R3 = mask
  140 000000D4 E0033005        AND              R3,R3,R5    ;if R3 = 1, floatB 
                                                            is negative
  141 000000D8 E1A03FA3        MOV              R3,R3,LSR #31 ;if R3 = 1, float
                                                            B is negative
  142 000000DC E1A00005        MOV              R0,R5       ;R0 = float B
  143 000000E0 EBFFFFD1        BL               fpdecode    ;go to fpdecode sub
                                                            routine
  144 000000E4 E1A08000        MOV              R8,R0       ;R8 = fraction of f
                                                            loat B
  145 000000E8 E1A09001        MOV              R9,R1       ;R9 = exponent of f
                                                            loat B
  146 000000EC         fpadd3
  147 000000EC E1570009        CMP              R7,R9       ;R7 = R9?
  148 000000F0 0A000010        BEQ              fpadd6      ;if so, go to fpadd
                                                            6
  149 000000F4 CA000007        BGT              fpadd5      ;if R7 > R9, go to 
                                                            fpadd5
  150 000000F8 E049A007        SUB              R10,R9,R7   ;R10 = R9 - R7
  151 000000FC         ;MOV R6,R6,LSR #1    ;R6>>1



ARM Macro Assembler    Page 4 


  152 000000FC E3A0B102        LDR              R11,=0x80000000
  153 00000100         ;SUB R10,R10,#1      ;R10--
  154 00000100         ;MOV R11,R11,LSR R10   ;R6>>R10
  155 00000100 E186600B        ORR              R6,R6,R11
  156 00000104 E24AA001        SUB              R10,R10,#1  ;R10--
  157 00000108 E1A06A36        MOV              R6,R6,LSR R10 ;R6>>R10
  158 0000010C E1A0C009        MOV              R12,R9      ;R12(common exponet
                                                            ) = R9
  159 00000110 E1A06426        MOV              R6,R6,LSR #8 ;R6>>8
  160 00000114 EA000008        B                fpadd4
  161 00000118         fpadd5
  162 00000118 E047A009        SUB              R10,R7,R9   ;R10 = R7 - R9
  163 0000011C         ;MOV R8,R8,LSR #1    ;R8>>1
  164 0000011C E3A0B102        LDR              R11,=0x80000000
  165 00000120         ;SUB R10,R10,#1      ;R10--
  166 00000120         ;MOV R11,R11,LSR R10   ;R11>>R10
  167 00000120 E188800B        ORR              R8,R8,R11
  168 00000124 E24AA001        SUB              R10,R10,#1  ;R10--
  169 00000128 E1A08A38        MOV              R8,R8,LSR R10 ;R7>>R10
  170 0000012C E1A0C007        MOV              R12,R7      ;R12(common exponet
                                                            ) = R7
  171 00000130 E1A08428        MOV              R8,R8,LSR #8 ;R8>>8
  172 00000134 EA000000        B                fpadd4
  173 00000138         fpadd6
  174 00000138 E1A0C007        MOV              R12,R7      ;R12(common exponet
                                                            ) = R7
  175 0000013C         fpadd4
  176 0000013C         ;CMP R2,R3           ;R2 = R3? (Is it both positive or n
                       egative?)
  177 0000013C         ;BNE fpadd9          ;
  178 0000013C E0866008        ADD              R6,R6,R8    ;R6 = total of each
                                                             fraction's abosolu
                                                            te value
  179 00000140 EA000007        B                fpaddEnd
  180 00000144         fpadd9
  181 00000144 E1560008        CMP              R6,R8       ;R6 = R8?
  182 00000148 CA000000        BGT              fpadd7      ;if R6 > R8, fpadd7
                                                            
  183 0000014C BA000001        BLT              fpadd8      ;if R6 < R8, fpadd8
                                                            
  184 00000150         fpadd7
  185 00000150 E0466008        SUB              R6,R6,R8    ;R6 = R6-R8  R6 = t
                                                            otal of each fracti
                                                            on
  186 00000154 EA000002        B                fpaddEnd
  187 00000158         fpadd8
  188 00000158 E0486006        SUB              R6,R8,R6    ;R6 = R8-R6
  189 0000015C E1A02003        MOV              R2,R3       ;R2 = sign number
  190 00000160 EAFFFFFF        B                fpaddEnd
  191 00000164         
  192 00000164         fpaddEnd
  193 00000164         ;MOV R6,R6,LSR #8    ;R6>>8
  194 00000164 E1A00006        MOV              R0,R6       ;R0 = fraction
  195 00000168 E1A0100C        MOV              R1,R12      ;R1 = exponent
  196 0000016C EBFFFFC2        BL               fpencode
  197 00000170 E8BD9FF0        POP              {R4-R12,PC}
  198 00000174         
  199 00000174                 END
              40010000 



ARM Macro Assembler    Page 5 


              40600000 
              41C40000 
              41960000 
              40700000 
              40A40000 
              7F800000 
              007FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab3-fpadd.d -o.\objects\lab3-fpadd.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Kei
l_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab3-fpadd.lst lab3
-fpadd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 6 in file lab3-fpadd.s
   Uses
      None
Comment: RESET unused
fpadd 000000A8

Symbol: fpadd
   Definitions
      At line 122 in file lab3-fpadd.s
   Uses
      At line 33 in file lab3-fpadd.s
      At line 36 in file lab3-fpadd.s

fpadd1 000000B4

Symbol: fpadd1
   Definitions
      At line 130 in file lab3-fpadd.s
   Uses
      None
Comment: fpadd1 unused
fpadd2 000000D0

Symbol: fpadd2
   Definitions
      At line 138 in file lab3-fpadd.s
   Uses
      None
Comment: fpadd2 unused
fpadd3 000000EC

Symbol: fpadd3
   Definitions
      At line 146 in file lab3-fpadd.s
   Uses
      None
Comment: fpadd3 unused
fpadd4 0000013C

Symbol: fpadd4
   Definitions
      At line 175 in file lab3-fpadd.s
   Uses
      At line 160 in file lab3-fpadd.s
      At line 172 in file lab3-fpadd.s

fpadd5 00000118

Symbol: fpadd5
   Definitions
      At line 161 in file lab3-fpadd.s
   Uses
      At line 149 in file lab3-fpadd.s
Comment: fpadd5 used once
fpadd6 00000138



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: fpadd6
   Definitions
      At line 173 in file lab3-fpadd.s
   Uses
      At line 148 in file lab3-fpadd.s
Comment: fpadd6 used once
fpadd7 00000150

Symbol: fpadd7
   Definitions
      At line 184 in file lab3-fpadd.s
   Uses
      At line 182 in file lab3-fpadd.s
Comment: fpadd7 used once
fpadd8 00000158

Symbol: fpadd8
   Definitions
      At line 187 in file lab3-fpadd.s
   Uses
      At line 183 in file lab3-fpadd.s
Comment: fpadd8 used once
fpadd9 00000144

Symbol: fpadd9
   Definitions
      At line 180 in file lab3-fpadd.s
   Uses
      None
Comment: fpadd9 unused
fpaddEnd 00000164

Symbol: fpaddEnd
   Definitions
      At line 192 in file lab3-fpadd.s
   Uses
      At line 179 in file lab3-fpadd.s
      At line 186 in file lab3-fpadd.s
      At line 190 in file lab3-fpadd.s

fpdecode 0000002C

Symbol: fpdecode
   Definitions
      At line 52 in file lab3-fpadd.s
   Uses
      At line 21 in file lab3-fpadd.s
      At line 135 in file lab3-fpadd.s
      At line 143 in file lab3-fpadd.s

fpdecode01 00000038

Symbol: fpdecode01
   Definitions
      At line 60 in file lab3-fpadd.s
   Uses
      None
Comment: fpdecode01 unused



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

fpdecode1 00000058

Symbol: fpdecode1
   Definitions
      At line 69 in file lab3-fpadd.s
   Uses
      At line 65 in file lab3-fpadd.s
Comment: fpdecode1 used once
fpdecodeEnd 00000070

Symbol: fpdecodeEnd
   Definitions
      At line 76 in file lab3-fpadd.s
   Uses
      None
Comment: fpdecodeEnd unused
fpencode 0000007C

Symbol: fpencode
   Definitions
      At line 91 in file lab3-fpadd.s
   Uses
      At line 22 in file lab3-fpadd.s
      At line 196 in file lab3-fpadd.s

fpencode1 00000088

Symbol: fpencode1
   Definitions
      At line 100 in file lab3-fpadd.s
   Uses
      None
Comment: fpencode1 unused
fpencodeEnd 000000A0

Symbol: fpencodeEnd
   Definitions
      At line 109 in file lab3-fpadd.s
   Uses
      None
Comment: fpencodeEnd unused
stop 00000028

Symbol: stop
   Definitions
      At line 39 in file lab3-fpadd.s
   Uses
      At line 39 in file lab3-fpadd.s
Comment: stop used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FP_A 41C40000

Symbol: FP_A
   Definitions
      At line 12 in file lab3-fpadd.s
   Uses
      At line 31 in file lab3-fpadd.s
Comment: FP_A used once
FP_B 41960000

Symbol: FP_B
   Definitions
      At line 13 in file lab3-fpadd.s
   Uses
      At line 32 in file lab3-fpadd.s
Comment: FP_B used once
2 symbols
356 symbols in table
