


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Button with IRQ Example
    4 00000000         ;
    5 00000000         
    6 00000000 E002C010 
                       PINSEL4 EQU              0xE002C010
    7 00000000         
    8 00000000 E01FC140 
                       EXTINT  EQU              0xE01FC140
    9 00000000 E01FC148 
                       EXTMODE EQU              0xE01FC148
   10 00000000 E01FC14C 
                       EXTPOLAR
                               EQU              0xE01FC14C
   11 00000000         
   12 00000000 FFFFF00C 
                       VICIntSelect
                               EQU              0xFFFFF00C
   13 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
   14 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
   15 00000000 FFFFF200 
                       VICVectPri0
                               EQU              0xFFFFF200
   16 00000000 FFFFFF00 
                       VICVectAddr
                               EQU              0xFFFFFF00
   17 00000000         
   18 00000000 0000000E 
                       VICVectEINT0
                               EQU              14
   19 00000000         
   20 00000000 00000080 
                       Irq_Stack_Size
                               EQU              0x80
   21 00000000         
   22 00000000 00000010 
                       Mode_USR
                               EQU              0x10
   23 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   24 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   25 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   26 00000000         
   27 00000000         
   28 00000000                 AREA             RESET, CODE, READONLY
   29 00000000                 ENTRY
   30 00000000         
   31 00000000         ; Exception Vectors
   32 00000000         



ARM Macro Assembler    Page 2 


   33 00000000 EA000006        B                Reset_Handler ; 0x00000000
   34 00000004 EA00002D        B                Undef_Handler ; 0x00000004
   35 00000008 EA00002D        B                SWI_Handler ; 0x00000008
   36 0000000C EA00002D        B                PAbt_Handler ; 0x0000000C
   37 00000010 EA00002D        B                DAbt_Handler ; 0x00000010
   38 00000014 E1A00000        NOP                          ; 0x00000014
   39 00000018 EA00002C        B                IRQ_Handler ; 0x00000018
   40 0000001C EA000031        B                FIQ_Handler ; 0x0000001C
   41 00000020         
   42 00000020         ;
   43 00000020         ; Reset Exception Handler
   44 00000020         ;
   45 00000020         Reset_Handler
   46 00000020         
   47 00000020         ;
   48 00000020         ; Initialize Stack Pointers (SP) for each mode we are us
                       ing
   49 00000020         ;
   50 00000020         
   51 00000020         ; Stack Top
   52 00000020 E59F00F4        LDR              R0, =0x40010000
   53 00000024         
   54 00000024         ; Enter undef mode and set initial SP
   55 00000024 E321F0D2        MSR              CPSR_c, #Mode_IRQ:OR:I_Bit:OR:F
_Bit
   56 00000028 E1A0D000        MOV              SP, R0
   57 0000002C E2400080        SUB              R0, R0, #Irq_Stack_Size
   58 00000030         
   59 00000030         ; Enter user mode and set initial SP
   60 00000030 E321F010        MSR              CPSR_c, #Mode_USR
   61 00000034 E1A0D000        MOV              SP, R0
   62 00000038         
   63 00000038         ;
   64 00000038         ; Initialise variables stored in RAM
   65 00000038         ;
   66 00000038 E59F40E0        LDR              R4, =count
   67 0000003C E3A05000        LDR              R5, =0
   68 00000040 E5845000        STR              R5, [R4]    ; count = 0
   69 00000044         
   70 00000044         ;
   71 00000044         ; Configure P2.10 for EINT0
   72 00000044         ;
   73 00000044         
   74 00000044         ; Enable P2.10 for GPIO
   75 00000044 E59F40D8        LDR              R4, =PINSEL4
   76 00000048 E5945000        LDR              R5, [R4]    ; read current valu
                                                            e
   77 0000004C E3C55603        BIC              R5, #(0x03 << 20) 
                                                            ; clear bits 21:20
   78 00000050 E3855601        ORR              R5, #(0x01 << 20) ; set bits 21
                                                            :20 to 01
   79 00000054 E5845000        STR              R5, [R4]    ; write new value
   80 00000058         
   81 00000058         ; Set edge-sensitive mode for EINT0
   82 00000058 E59F40C8        LDR              R4, =EXTMODE
   83 0000005C E5945000        LDR              R5, [R4]    ; read
   84 00000060 E3855001        ORR              R5, #1      ; modify
   85 00000064 E5C45000        STRB             R5, [R4]    ; write
   86 00000068         



ARM Macro Assembler    Page 3 


   87 00000068         ; Set rising-edge mode for EINT0
   88 00000068 E59F40BC        LDR              R4, =EXTPOLAR
   89 0000006C E5945000        LDR              R5, [R4]    ; read
   90 00000070 E3C55001        BIC              R5, #1      ; modify
   91 00000074 E5C45000        STRB             R5, [R4]    ; write
   92 00000078         
   93 00000078         ; Reset EINT0
   94 00000078 E59F40B0        LDR              R4, =EXTINT
   95 0000007C E3A05001        MOV              R5, #1
   96 00000080 E5C45000        STRB             R5, [R4]
   97 00000084         
   98 00000084         ;
   99 00000084         ; Configure VIC for EINT0 interrupts
  100 00000084         ;
  101 00000084         
  102 00000084         ; Useful VIC vector numbers and masks for following code
                       
  103 00000084 E3A0400E        LDR              R4, =VICVectEINT0 ; vector 4
  104 00000088 E3A05901        LDR              R5, =(1 << VICVectEINT0) ; bit 
                                                            mask for vector 14
  105 0000008C         
  106 0000008C         ; VICIntSelect - Clear bit 4 of VICIntSelect register to
                        cause
  107 0000008C         ; channel 14 (EINT0) to raise IRQs (not FIQs)
  108 0000008C E59F60A0        LDR              R6, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  109 00000090 E5967000        LDR              R7, [R6]    ; tmp = Memory.Word
                                                            (addr);
  110 00000094 E1C77005        BIC              R7, R7, R5  ; Clear bit for Vec
                                                            tor 14
  111 00000098 E5867000        STR              R7, [R6]    ; Memory.Word(addr)
                                                             = tmp;
  112 0000009C         
  113 0000009C         ; Set Priority for VIC channel 14 (EINT0) to lowest (15)
                        by setting
  114 0000009C         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 14 of an
  115 0000009C         ; array of 4-byte values that starts at VICVectPri0.
  116 0000009C         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  117 0000009C E59F6094        LDR              R6, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  118 000000A0 E3A0700F        MOV              R7, #15     ; pri = 15;
  119 000000A4 E7867104        STR              R7, [R6, R4, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = pri;
  120 000000A8         
  121 000000A8         ; Set Handler routine address for VIC channel 4 (TIMER0)
                        to address of
  122 000000A8         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element
  123 000000A8         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  124 000000A8         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  125 000000A8 E59F608C        LDR              R6, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  126 000000AC E59F708C        LDR              R7, =Button_Handler ; handler =
                                                             address of TimerHa
                                                            ndler;
  127 000000B0 E7867104        STR              R7, [R6, R4, LSL #2] ; Memory.W



ARM Macro Assembler    Page 4 


                                                            ord(addr + vector *
                                                             4) = handler
  128 000000B4         
  129 000000B4         ; Enable VIC channel 14 (EINT0) by writing a 1 to bit 4 
                       of VICIntEnable
  130 000000B4 E59F6088        LDR              R6, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  131 000000B8 E5865000        STR              R5, [R6]    ; enable interrupts
                                                             for vector 14
  132 000000BC         
  133 000000BC         ;
  134 000000BC         ; Nothing more to do here!!! The rest of our programs fu
                       nctionality
  135 000000BC         ; takes place in the context of our IRQ handler (which w
                       ill interrupt
  136 000000BC         ; the STOP B STOP loop).
  137 000000BC         ;
  138 000000BC         ; Real systems often implement an "idle loop" here, for 
                       example, doing
  139 000000BC         ; some housekeeping or putting the processor into a powe
                       r-saving state.
  140 000000BC         ;
  141 000000BC         
  142 000000BC EAFFFFFE 
                       STOP    B                STOP
  143 000000C0         
  144 000000C0         
  145 000000C0         ;
  146 000000C0         ; Software Interrupt Exception Handler
  147 000000C0         ;
  148 000000C0         Undef_Handler
  149 000000C0 EAFFFFFE        B                Undef_Handler
  150 000000C4         
  151 000000C4         ;
  152 000000C4         ; Software Interrupt Exception Handler
  153 000000C4         ;
  154 000000C4         SWI_Handler
  155 000000C4 EAFFFFFE        B                SWI_Handler
  156 000000C8         
  157 000000C8         ;
  158 000000C8         ; Prefetch Abort Exception Handler
  159 000000C8         ;
  160 000000C8         PAbt_Handler
  161 000000C8 EAFFFFFE        B                PAbt_Handler
  162 000000CC         
  163 000000CC         ;
  164 000000CC         ; Data Abort Exception Handler
  165 000000CC         ;
  166 000000CC         DAbt_Handler
  167 000000CC EAFFFFFE        B                DAbt_Handler
  168 000000D0         
  169 000000D0         ;
  170 000000D0         ; Interrupt ReQuest (IRQ) Exception Handler (top level -
                        all devices)
  171 000000D0         ;
  172 000000D0         IRQ_Handler
  173 000000D0 E24EE004        SUB              lr, lr, #4  ; for IRQs, LR is a
                                                            lways 4 more than t
                                                            he



ARM Macro Assembler    Page 5 


  174 000000D4         ; real return address
  175 000000D4 E92D400F        STMFD            sp!, {r0-r3,lr} 
                                                            ; save r0-r3 and lr
                                                            
  176 000000D8         
  177 000000D8 E3E000FF        LDR              r0, =VICVectAddr ; address of V
                                                            IC Vector Address m
                                                            emory-
  178 000000DC         ; mapped register
  179 000000DC         
  180 000000DC E1A0E00F        MOV              lr, pc      ; can’t use BL he
                                                            re because we are b
                                                            ranching
  181 000000E0 E590F000        LDR              pc, [r0]    ; to a different su
                                                            broutine dependant 
                                                            on device
  182 000000E4         ; raising the IRQ - this is a manual BL !!
  183 000000E4         
  184 000000E4 E8FD800F        LDMFD            sp!, {r0-r3, pc}^ ; restore r0-
                                                            r3, lr and CPSR
  185 000000E8         
  186 000000E8         ;
  187 000000E8         ; Fast Interrupt reQuest Exception Handler
  188 000000E8         ;
  189 000000E8         FIQ_Handler
  190 000000E8 EAFFFFFE        B                FIQ_Handler
  191 000000EC         
  192 000000EC         ;
  193 000000EC         ; TIMER0 IRQ Handler (device-specific handler called by 
                       top-level IRQ_Handler)
  194 000000EC         ;
  195 000000EC         Button_Handler
  196 000000EC         
  197 000000EC E92D4030        STMFD            sp!, {r4-r5, lr}
  198 000000F0         
  199 000000F0         ; Reset EINT0 interrupt by writing 1 to EXTINT register
  200 000000F0 E59F4038        LDR              R4, =EXTINT
  201 000000F4 E3A05001        MOV              R5, #1
  202 000000F8 E5C45000        STRB             R5, [R4]
  203 000000FC         
  204 000000FC         ;
  205 000000FC         ; Increment Count
  206 000000FC         ;
  207 000000FC E59F401C        LDR              R4, =count  ; addr = count
  208 00000100 E5945000        LDR              R5, [R4]    ; tmp_count = Memor
                                                            y.Word(addr);
  209 00000104 E2855001        ADD              R5, R5, #1  ; increment count;
  210 00000108 E5845000        STR              R5, [R4]    ; Memory.Word(addr)
                                                             = tmp_count;
  211 0000010C         
  212 0000010C         ;
  213 0000010C         ; Clear source of interrupt
  214 0000010C         ;
  215 0000010C E3E040FF        LDR              R4, =VICVectAddr ; addr = VICVe
                                                            ctAddr
  216 00000110 E3A05000        MOV              R5, #0      ; tmp = 0;
  217 00000114 E5845000        STR              R5, [R4]    ; Memory.Word(addr)
                                                             = tmp;
  218 00000118         



ARM Macro Assembler    Page 6 


  219 00000118 E8BD8030        LDMFD            sp!, {r4-r5, pc}
  220 0000011C         
  221 0000011C         
  222 0000011C 40010000 
              00000000 
              E002C010 
              E01FC148 
              E01FC14C 
              E01FC140 
              FFFFF00C 
              FFFFF200 
              FFFFF100 
              00000000 
              FFFFF010 
              00000000         AREA             TestData, DATA, READWRITE
  223 00000000         
  224 00000000 00 00 00 
              00       count   SPACE            4
  225 00000004         
  226 00000004                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\button-int.d -o.\objects\button-int.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Kei
l_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 516" --list=.\listings\button-int.lst butt
on-int.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Button_Handler 000000EC

Symbol: Button_Handler
   Definitions
      At line 195 in file button-int.s
   Uses
      At line 126 in file button-int.s
Comment: Button_Handler used once
DAbt_Handler 000000CC

Symbol: DAbt_Handler
   Definitions
      At line 166 in file button-int.s
   Uses
      At line 37 in file button-int.s
      At line 167 in file button-int.s

FIQ_Handler 000000E8

Symbol: FIQ_Handler
   Definitions
      At line 189 in file button-int.s
   Uses
      At line 40 in file button-int.s
      At line 190 in file button-int.s

IRQ_Handler 000000D0

Symbol: IRQ_Handler
   Definitions
      At line 172 in file button-int.s
   Uses
      At line 39 in file button-int.s
Comment: IRQ_Handler used once
PAbt_Handler 000000C8

Symbol: PAbt_Handler
   Definitions
      At line 160 in file button-int.s
   Uses
      At line 36 in file button-int.s
      At line 161 in file button-int.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 28 in file button-int.s
   Uses
      None
Comment: RESET unused
Reset_Handler 00000020

Symbol: Reset_Handler
   Definitions
      At line 45 in file button-int.s
   Uses
      At line 33 in file button-int.s
Comment: Reset_Handler used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

STOP 000000BC

Symbol: STOP
   Definitions
      At line 142 in file button-int.s
   Uses
      At line 142 in file button-int.s
Comment: STOP used once
SWI_Handler 000000C4

Symbol: SWI_Handler
   Definitions
      At line 154 in file button-int.s
   Uses
      At line 35 in file button-int.s
      At line 155 in file button-int.s

Undef_Handler 000000C0

Symbol: Undef_Handler
   Definitions
      At line 148 in file button-int.s
   Uses
      At line 34 in file button-int.s
      At line 149 in file button-int.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 222 in file button-int.s
   Uses
      None
Comment: TestData unused
count 00000000

Symbol: count
   Definitions
      At line 224 in file button-int.s
   Uses
      At line 66 in file button-int.s
      At line 207 in file button-int.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

EXTINT E01FC140

Symbol: EXTINT
   Definitions
      At line 8 in file button-int.s
   Uses
      At line 94 in file button-int.s
      At line 200 in file button-int.s

EXTMODE E01FC148

Symbol: EXTMODE
   Definitions
      At line 9 in file button-int.s
   Uses
      At line 82 in file button-int.s
Comment: EXTMODE used once
EXTPOLAR E01FC14C

Symbol: EXTPOLAR
   Definitions
      At line 10 in file button-int.s
   Uses
      At line 88 in file button-int.s
Comment: EXTPOLAR used once
F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 25 in file button-int.s
   Uses
      At line 55 in file button-int.s
Comment: F_Bit used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 24 in file button-int.s
   Uses
      At line 55 in file button-int.s
Comment: I_Bit used once
Irq_Stack_Size 00000080

Symbol: Irq_Stack_Size
   Definitions
      At line 20 in file button-int.s
   Uses
      At line 57 in file button-int.s
Comment: Irq_Stack_Size used once
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 23 in file button-int.s
   Uses
      At line 55 in file button-int.s
Comment: Mode_IRQ used once
Mode_USR 00000010




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: Mode_USR
   Definitions
      At line 22 in file button-int.s
   Uses
      At line 60 in file button-int.s
Comment: Mode_USR used once
PINSEL4 E002C010

Symbol: PINSEL4
   Definitions
      At line 6 in file button-int.s
   Uses
      At line 75 in file button-int.s
Comment: PINSEL4 used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 13 in file button-int.s
   Uses
      At line 130 in file button-int.s
Comment: VICIntEnable used once
VICIntSelect FFFFF00C

Symbol: VICIntSelect
   Definitions
      At line 12 in file button-int.s
   Uses
      At line 108 in file button-int.s
Comment: VICIntSelect used once
VICVectAddr FFFFFF00

Symbol: VICVectAddr
   Definitions
      At line 16 in file button-int.s
   Uses
      At line 177 in file button-int.s
      At line 215 in file button-int.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 14 in file button-int.s
   Uses
      At line 125 in file button-int.s
Comment: VICVectAddr0 used once
VICVectEINT0 0000000E

Symbol: VICVectEINT0
   Definitions
      At line 18 in file button-int.s
   Uses
      At line 103 in file button-int.s
      At line 104 in file button-int.s

VICVectPri0 FFFFF200

Symbol: VICVectPri0



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 15 in file button-int.s
   Uses
      At line 117 in file button-int.s
Comment: VICVectPri0 used once
15 symbols
361 symbols in table
