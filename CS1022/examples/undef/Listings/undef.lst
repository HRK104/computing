


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Undefined Instruction Exception Example
    4 00000000         ;
    5 00000000         
    6 00000000         
    7 00000000 00000080 
                       Undef_Stack_Size
                               EQU              0x80
    8 00000000         
    9 00000000 00000010 
                       Mode_USR
                               EQU              0x10
   10 00000000 0000001B 
                       Mode_UND
                               EQU              0x1B
   11 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   12 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   13 00000000         
   14 00000000                 AREA             RESET, CODE, READONLY
   15 00000000                 ENTRY
   16 00000000         
   17 00000000         ; Exception Vectors
   18 00000000         
   19 00000000 EA000006        B                Reset_Handler ; 0x00000000
   20 00000004 EA00000F        B                Undef_Handler ; 0x00000004
   21 00000008 EA00001D        B                SWI_Handler ; 0x00000008
   22 0000000C EA00001D        B                PAbt_Handler ; 0x0000000C
   23 00000010 EA00001D        B                DAbt_Handler ; 0x00000010
   24 00000014 E1A00000        NOP                          ; 0x00000014
   25 00000018 EA00001C        B                IRQ_Handler ; 0x00000018
   26 0000001C EA00001C        B                FIQ_Handler ; 0x0000001C
   27 00000020         
   28 00000020         
   29 00000020         ;
   30 00000020         ; Reset Exception Handler
   31 00000020         ;
   32 00000020         Reset_Handler
   33 00000020         
   34 00000020         ;
   35 00000020         ; Initialize Stack Pointers (SP) for each mode we are us
                       ing
   36 00000020         ;
   37 00000020         
   38 00000020         ; Stack Top
   39 00000020 E59F00A0        LDR              R0, =0x40010000
   40 00000024         
   41 00000024         ; Enter undef mode and set initial SP
   42 00000024 E321F0DB        MSR              CPSR_c, #Mode_UND:OR:I_Bit:OR:F
_Bit
   43 00000028 E1A0D000        MOV              SP, R0
   44 0000002C E2400080        SUB              R0, R0, #Undef_Stack_Size
   45 00000030         
   46 00000030         ; Enter user mode and set initial SP
   47 00000030 E321F010        MSR              CPSR_c, #Mode_USR



ARM Macro Assembler    Page 2 


   48 00000034 E1A0D000        MOV              SP, R0
   49 00000038         
   50 00000038         ;
   51 00000038         ; Rest of your program goes here
   52 00000038         ;
   53 00000038         
   54 00000038         ; Test the emulated POW instruction
   55 00000038 E3A04003        LDR              r4, =3      ; test 3^4
   56 0000003C E3A05004        LDR              r5, =4      ;
   57 00000040         
   58 00000040         ; This is our undefined instruction opcode
   59 00000040 77F150F4        DCD              0x77F150F4  ; POW r0, r4, r5 (r
                                                            0 = r4 ^ r5)
   60 00000044         
   61 00000044 EAFFFFFE 
                       STOP    B                STOP
   62 00000048         
   63 00000048         
   64 00000048         ;
   65 00000048         ; Undefined Instruction Exception Handler
   66 00000048         ; Emulates a POW instruction that computes Rd = Rm^Rn
   67 00000048         ;
   68 00000048         Undef_Handler
   69 00000048 E92D5FFF        STMFD            sp!, {r0-r12, LR} 
                                                            ; save registers
   70 0000004C         
   71 0000004C E51E4004        LDR              r4, [lr, #-4] ; load undefined 
                                                            instruction
   72 00000050 E204580F        BIC              r5, r4, #0xFFF0FFFF ; clear all
                                                             but opcode bits
   73 00000054 E3550801        CMP              r5, #0x00010000 ; check for und
                                                            efined opcode 0x1
   74 00000058 1A000008        BNE              endif1      ; if (power instruc
                                                            tion) {
   75 0000005C         
   76 0000005C E204500F        BIC              r5, r4, #0xFFFFFFF0 ;   isolate
                                                             Rm register number
                                                            
   77 00000060 E2046A0F        BIC              r6, r4, #0xFFFF0FFF ;   isolate
                                                             Rn register number
                                                            
   78 00000064 E1A06626        MOV              r6, r6, LSR #12 ;
   79 00000068 E2047C0F        BIC              r7, r4, #0xFFFFF0FF ;   isolate
                                                             Rd register number
                                                            
   80 0000006C E1A07427        MOV              r7, r7, LSR #8 ;
   81 00000070         
   82 00000070 E79D1105        LDR              r1, [sp, r5, LSL #2] ;   read s
                                                            aved Rm from stack 
                                                            (don’t pop)
   83 00000074 E79D2106        LDR              r2, [sp, r6, LSL #2] ;   read s
                                                            aved Rn from stack 
                                                            (don’t pop)
   84 00000078         
   85 00000078 EB000006        BL               power       ;   call pow subrou
                                                            tine
   86 0000007C         
   87 0000007C E78D0107        STR              r0, [sp, r7, LSL #2] ;   save r
                                                            esult over saved Rd



ARM Macro Assembler    Page 3 


                                                            
   88 00000080         endif1                               ; }
   89 00000080 E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
   90 00000084         
   91 00000084         
   92 00000084         ;
   93 00000084         ; The remaining exception handlers are "dummy" handlers
   94 00000084         ;   that we can replace with real handlers as required b
                       y
   95 00000084         ;   our application.
   96 00000084         ;
   97 00000084         
   98 00000084         ;
   99 00000084         ; Software Interrupt Exception Handler (dummy handler / 
                       placeholder)
  100 00000084         ;
  101 00000084         SWI_Handler
  102 00000084 EAFFFFFE        B                SWI_Handler
  103 00000088         
  104 00000088         ;
  105 00000088         ; Prefetch Abort Exception Handler (dummy handler / plac
                       eholder)
  106 00000088         ;
  107 00000088         PAbt_Handler
  108 00000088 EAFFFFFE        B                PAbt_Handler
  109 0000008C         
  110 0000008C         ;
  111 0000008C         ; Data Abort Exception Handler (dummy handler / placehol
                       der)
  112 0000008C         ;
  113 0000008C         DAbt_Handler
  114 0000008C EAFFFFFE        B                DAbt_Handler
  115 00000090         
  116 00000090         ;
  117 00000090         ; Interrupt ReQuest (IRQ) Exception Handler (dummy handl
                       er / placeholder)
  118 00000090         ;
  119 00000090         IRQ_Handler
  120 00000090 EAFFFFFE        B                IRQ_Handler
  121 00000094         
  122 00000094         ;
  123 00000094         ; Fast Interrupt reQuest Exception Handler (dummy handle
                       r / placeholder)
  124 00000094         ;
  125 00000094         FIQ_Handler
  126 00000094 EAFFFFFE        B                FIQ_Handler
  127 00000098         
  128 00000098         
  129 00000098         ; power subroutine
  130 00000098         ; Computes x^y
  131 00000098         ; paramaters: r1: x (value)
  132 00000098         ;  r2: y (value)
  133 00000098         ; return: r0: result (variable)
  134 00000098         power
  135 00000098 E92D4006        STMFD            sp!, {r1-r2,lr} 
                                                            ; save registers
  136 0000009C         
  137 0000009C E3520000        CMP              r2, #0      ; if (y = 0)



ARM Macro Assembler    Page 4 


  138 000000A0 1A000001        BNE              else2       ; {
  139 000000A4 E3A00001        MOV              r0, #1      ;   result = 1
  140 000000A8 EA000005        B                endif2      ; }
  141 000000AC         else2                                ; else {
  142 000000AC E1A00001        MOV              r0, r1      ;   result = x
  143 000000B0 E2522001        SUBS             r2, r2, #1  ;   y = y - 1
  144 000000B4 0A000002        BEQ              endif3      ;   if (y != 0) {
  145 000000B8         do4                                  ;     do {
  146 000000B8 E0000091        MUL              r0, r1, r0  ;       result = re
                                                            sult * x
  147 000000BC E2522001        SUBS             r2, r2, #1  ;       y = y - 1
  148 000000C0 1AFFFFFC        BNE              do4         ;     } while (y !=
                                                             0)
  149 000000C4         endif3                               ;   }
  150 000000C4         endif2                               ; }
  151 000000C4         
  152 000000C4 E8BD8006        LDMFD            sp!, {r1-r2, pc} ; restore regi
                                                            sters and return
  153 000000C8         
  154 000000C8                 END
              40010000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\undef.d -o.\objects\undef.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 516" --list=.\listings\undef.lst undef.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DAbt_Handler 0000008C

Symbol: DAbt_Handler
   Definitions
      At line 113 in file undef.s
   Uses
      At line 23 in file undef.s
      At line 114 in file undef.s

FIQ_Handler 00000094

Symbol: FIQ_Handler
   Definitions
      At line 125 in file undef.s
   Uses
      At line 26 in file undef.s
      At line 126 in file undef.s

IRQ_Handler 00000090

Symbol: IRQ_Handler
   Definitions
      At line 119 in file undef.s
   Uses
      At line 25 in file undef.s
      At line 120 in file undef.s

PAbt_Handler 00000088

Symbol: PAbt_Handler
   Definitions
      At line 107 in file undef.s
   Uses
      At line 22 in file undef.s
      At line 108 in file undef.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 14 in file undef.s
   Uses
      None
Comment: RESET unused
Reset_Handler 00000020

Symbol: Reset_Handler
   Definitions
      At line 32 in file undef.s
   Uses
      At line 19 in file undef.s
Comment: Reset_Handler used once
STOP 00000044

Symbol: STOP
   Definitions
      At line 61 in file undef.s
   Uses
      At line 61 in file undef.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: STOP used once
SWI_Handler 00000084

Symbol: SWI_Handler
   Definitions
      At line 101 in file undef.s
   Uses
      At line 21 in file undef.s
      At line 102 in file undef.s

Undef_Handler 00000048

Symbol: Undef_Handler
   Definitions
      At line 68 in file undef.s
   Uses
      At line 20 in file undef.s
Comment: Undef_Handler used once
do4 000000B8

Symbol: do4
   Definitions
      At line 145 in file undef.s
   Uses
      At line 148 in file undef.s
Comment: do4 used once
else2 000000AC

Symbol: else2
   Definitions
      At line 141 in file undef.s
   Uses
      At line 138 in file undef.s
Comment: else2 used once
endif1 00000080

Symbol: endif1
   Definitions
      At line 88 in file undef.s
   Uses
      At line 74 in file undef.s
Comment: endif1 used once
endif2 000000C4

Symbol: endif2
   Definitions
      At line 150 in file undef.s
   Uses
      At line 140 in file undef.s
Comment: endif2 used once
endif3 000000C4

Symbol: endif3
   Definitions
      At line 149 in file undef.s
   Uses
      At line 144 in file undef.s
Comment: endif3 used once
power 00000098



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: power
   Definitions
      At line 134 in file undef.s
   Uses
      At line 85 in file undef.s
Comment: power used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 12 in file undef.s
   Uses
      At line 42 in file undef.s
Comment: F_Bit used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 11 in file undef.s
   Uses
      At line 42 in file undef.s
Comment: I_Bit used once
Mode_UND 0000001B

Symbol: Mode_UND
   Definitions
      At line 10 in file undef.s
   Uses
      At line 42 in file undef.s
Comment: Mode_UND used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 9 in file undef.s
   Uses
      At line 47 in file undef.s
Comment: Mode_USR used once
Undef_Stack_Size 00000080

Symbol: Undef_Stack_Size
   Definitions
      At line 7 in file undef.s
   Uses
      At line 44 in file undef.s
Comment: Undef_Stack_Size used once
5 symbols
354 symbols in table
