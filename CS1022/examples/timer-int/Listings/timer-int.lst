


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; IRQ Example - TIMER0 interrupts
    4 00000000         ;
    5 00000000         
    6 00000000 E0004000 
                       T0IR    EQU              0xE0004000
    7 00000000 E0004004 
                       T0TCR   EQU              0xE0004004
    8 00000000 E0004018 
                       T0MR0   EQU              0xE0004018
    9 00000000 E0004014 
                       T0MCR   EQU              0xE0004014
   10 00000000         
   11 00000000 FFFFF00C 
                       VICIntSelect
                               EQU              0xFFFFF00C
   12 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
   13 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
   14 00000000 FFFFF200 
                       VICVectPri0
                               EQU              0xFFFFF200
   15 00000000 FFFFFF00 
                       VICVectAddr
                               EQU              0xFFFFFF00
   16 00000000         
   17 00000000 00000004 
                       VICVectT0
                               EQU              4
   18 00000000         
   19 00000000 00000080 
                       Irq_Stack_Size
                               EQU              0x80
   20 00000000         
   21 00000000 00000010 
                       Mode_USR
                               EQU              0x10
   22 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   23 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   24 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   25 00000000         
   26 00000000         
   27 00000000                 AREA             RESET, CODE, READONLY
   28 00000000                 ENTRY
   29 00000000         
   30 00000000         ; Exception Vectors
   31 00000000         
   32 00000000 EA000006        B                Reset_Handler ; 0x00000000
   33 00000004 EA000029        B                Undef_Handler ; 0x00000004



ARM Macro Assembler    Page 2 


   34 00000008 EA000029        B                SWI_Handler ; 0x00000008
   35 0000000C EA000029        B                PAbt_Handler ; 0x0000000C
   36 00000010 EA000029        B                DAbt_Handler ; 0x00000010
   37 00000014 E1A00000        NOP                          ; 0x00000014
   38 00000018 EA000028        B                IRQ_Handler ; 0x00000018
   39 0000001C EA00002D        B                FIQ_Handler ; 0x0000001C
   40 00000020         
   41 00000020         ;
   42 00000020         ; Reset Exception Handler
   43 00000020         ;
   44 00000020         Reset_Handler
   45 00000020         
   46 00000020         ;
   47 00000020         ; Initialize Stack Pointers (SP) for each mode we are us
                       ing
   48 00000020         ;
   49 00000020         
   50 00000020         ; Stack Top
   51 00000020 E59F00D4        LDR              R0, =0x40010000
   52 00000024         
   53 00000024         ; Enter undef mode and set initial SP
   54 00000024 E321F0D2        MSR              CPSR_c, #Mode_IRQ:OR:I_Bit:OR:F
_Bit
   55 00000028 E1A0D000        MOV              SP, R0
   56 0000002C E2400080        SUB              R0, R0, #Irq_Stack_Size
   57 00000030         
   58 00000030         ; Enter user mode and set initial SP
   59 00000030 E321F010        MSR              CPSR_c, #Mode_USR
   60 00000034 E1A0D000        MOV              SP, R0
   61 00000038         
   62 00000038         
   63 00000038         ;
   64 00000038         ; Configure TIMER0
   65 00000038         ;
   66 00000038         
   67 00000038         ; Stop and reset TIMER0 using Timer Control Register
   68 00000038         ; Set bit 0 of TCR to 0 to stop TIMER
   69 00000038         ; Set bit 1 of TCR to 1 to reset TIMER
   70 00000038 E59F50C0        LDR              R5, =T0TCR
   71 0000003C E3A06002        LDR              R6, =0x2
   72 00000040 E5C56000        STRB             R6, [R5]
   73 00000044         
   74 00000044         ; Clear any previous TIMER0 interrupt by writing 0xFF to
                        the TIMER0
   75 00000044         ; Interrupt Register (T0IR)
   76 00000044 E59F50B8        LDR              R5, =T0IR
   77 00000048 E3A060FF        LDR              R6, =0xFF
   78 0000004C E5C56000        STRB             R6, [R5]
   79 00000050         
   80 00000050         ; Set match register for 5 secs using Match Register
   81 00000050         ; Assuming a 1Mhz clock input to TIMER0, set MR
   82 00000050         ; MR0 (0xE0004018) to 5,000,000
   83 00000050 E59F40B0        LDR              R4, =T0MR0
   84 00000054 E59F50B0        LDR              R5, =5000000
   85 00000058 E5845000        STR              R5, [R4]
   86 0000005C         
   87 0000005C         ; IRQ on match using Match Control Register
   88 0000005C         ; Set bit 0 of MCR to 1 to turn on interrupts
   89 0000005C         ; Set bit 1 of MCR to 1 to reset counter to 0 after ever



ARM Macro Assembler    Page 3 


                       y match
   90 0000005C         ; Set bit 2 of MCR to 0 to leave the counter enabled aft
                       er match
   91 0000005C E59F40AC        LDR              R4, =T0MCR
   92 00000060 E3A05003        LDR              R5, =0x03
   93 00000064 E1C450B0        STRH             R5, [R4]
   94 00000068         
   95 00000068         ;
   96 00000068         ; Configure VIC for TIMER0 interrupts
   97 00000068         ;
   98 00000068         
   99 00000068         ; Useful VIC vector numbers and masks for following code
                       
  100 00000068 E3A03004        LDR              R3, =VICVectT0 ; vector 4
  101 0000006C E3A04010        LDR              R4, =(1 << VICVectT0) ; bit mas
                                                            k for vector 4
  102 00000070         
  103 00000070         ; VICIntSelect - Clear bit 4 of VICIntSelect register to
                        cause
  104 00000070         ; channel 4 (TIMER0) to raise IRQs (not FIQs)
  105 00000070 E59F509C        LDR              R5, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  106 00000074 E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);
  107 00000078 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x04
  108 0000007C E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  109 00000080         
  110 00000080         ; Set Priority for VIC channel 4 (TIMER0) to lowest (15)
                        by setting
  111 00000080         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 4 of an
  112 00000080         ; array of 4-byte values that starts at VICVectPri0.
  113 00000080         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  114 00000080 E59F5090        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  115 00000084 E3A0600F        MOV              R6, #15     ; pri = 15;
  116 00000088 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = pri;
  117 0000008C         
  118 0000008C         ; Set Handler routine address for VIC channel 4 (TIMER0)
                        to address of
  119 0000008C         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element
  120 0000008C         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  121 0000008C         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  122 0000008C E59F5088        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  123 00000090 E59F6088        LDR              R6, =Timer_Handler ; handler = 
                                                            address of TimerHan
                                                            dler;
  124 00000094 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  125 00000098         
  126 00000098         ; Enable VIC channel 4 (TIMER0) by writing a 1 to bit 4 



ARM Macro Assembler    Page 4 


                       of VICIntEnable
  127 00000098 E59F5084        LDR              R5, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  128 0000009C E5854000        STR              R4, [R5]    ; enable interrupts
                                                             for vector 0x4
  129 000000A0         
  130 000000A0         
  131 000000A0         ;
  132 000000A0         ; Finally ... start TIMER0
  133 000000A0         ;
  134 000000A0         
  135 000000A0         ; Start TIMER0 using the Timer Control Register
  136 000000A0         ; Set bit 0 of TCR (0xE0004004) to enable the timer
  137 000000A0 E59F4058        LDR              R4, =T0TCR
  138 000000A4 E3A05001        LDR              R5, =0x01
  139 000000A8 E5C45000        STRB             R5, [R4]
  140 000000AC         
  141 000000AC         ;
  142 000000AC         ; Nothing more to do here!!! The rest of our programs fu
                       nctionality
  143 000000AC         ; takes place in the context of our IRQ handler (which w
                       ill interrupt
  144 000000AC         ; the STOP B STOP loop).
  145 000000AC         ;
  146 000000AC         ; Real systems often implement an "idle loop" here, for 
                       example, doing
  147 000000AC         ; some housekeeping or putting the processor into a powe
                       r-saving state.
  148 000000AC         ;
  149 000000AC         
  150 000000AC EAFFFFFE 
                       STOP    B                STOP
  151 000000B0         
  152 000000B0         
  153 000000B0         ;
  154 000000B0         ; Software Interrupt Exception Handler
  155 000000B0         ;
  156 000000B0         Undef_Handler
  157 000000B0 EAFFFFFE        B                Undef_Handler
  158 000000B4         
  159 000000B4         ;
  160 000000B4         ; Software Interrupt Exception Handler
  161 000000B4         ;
  162 000000B4         SWI_Handler
  163 000000B4 EAFFFFFE        B                SWI_Handler
  164 000000B8         
  165 000000B8         ;
  166 000000B8         ; Prefetch Abort Exception Handler
  167 000000B8         ;
  168 000000B8         PAbt_Handler
  169 000000B8 EAFFFFFE        B                PAbt_Handler
  170 000000BC         
  171 000000BC         ;
  172 000000BC         ; Data Abort Exception Handler
  173 000000BC         ;
  174 000000BC         DAbt_Handler
  175 000000BC EAFFFFFE        B                DAbt_Handler
  176 000000C0         
  177 000000C0         ;



ARM Macro Assembler    Page 5 


  178 000000C0         ; Interrupt ReQuest (IRQ) Exception Handler (top level -
                        all devices)
  179 000000C0         ;
  180 000000C0         IRQ_Handler
  181 000000C0 E24EE004        SUB              lr, lr, #4  ; for IRQs, LR is a
                                                            lways 4 more than t
                                                            he
  182 000000C4         ; real return address
  183 000000C4 E92D400F        STMFD            sp!, {r0-r3,lr} 
                                                            ; save r0-r3 and lr
                                                            
  184 000000C8         
  185 000000C8 E3E000FF        LDR              r0, =VICVectAddr ; address of V
                                                            IC Vector Address m
                                                            emory-
  186 000000CC         ; mapped register
  187 000000CC         
  188 000000CC E1A0E00F        MOV              lr, pc      ; can’t use BL he
                                                            re because we are b
                                                            ranching
  189 000000D0 E590F000        LDR              pc, [r0]    ; to a different su
                                                            broutine dependant 
                                                            on device
  190 000000D4         ; raising the IRQ - this is a manual BL !!
  191 000000D4         
  192 000000D4 E8FD800F        LDMFD            sp!, {r0-r3, pc}^ ; restore r0-
                                                            r3, lr and CPSR
  193 000000D8         
  194 000000D8         ;
  195 000000D8         ; Fast Interrupt reQuest Exception Handler
  196 000000D8         ;
  197 000000D8         FIQ_Handler
  198 000000D8 EAFFFFFE        B                FIQ_Handler
  199 000000DC         
  200 000000DC         ;
  201 000000DC         ; TIMER0 IRQ Handler (device-specific handler called by 
                       top-level IRQ_Handler)
  202 000000DC         ;
  203 000000DC         Timer_Handler
  204 000000DC         
  205 000000DC E92D4030        STMFD            sp!, {r4-r5, lr}
  206 000000E0         
  207 000000E0         ; Reset TIMER0 interrupt by writing 0xFF to T0IR
  208 000000E0 E59F401C        LDR              R4, =T0IR
  209 000000E4 E3A050FF        MOV              R5, #0xFF
  210 000000E8 E5C45000        STRB             R5, [R4]
  211 000000EC         
  212 000000EC         ;
  213 000000EC         ; take some action here when the timer expires!
  214 000000EC         ;
  215 000000EC         
  216 000000EC         ; Clear source of interrupt by writing 0 to VICVectAddr
  217 000000EC E3E040FF        LDR              R4, =VICVectAddr
  218 000000F0 E3A05000        MOV              R5, #0
  219 000000F4 E5845000        STR              R5, [R4]
  220 000000F8         
  221 000000F8 E8BD8030        LDMFD            sp!, {r4-r5, pc}
  222 000000FC         
  223 000000FC                 END



ARM Macro Assembler    Page 6 


              40010000 
              E0004004 
              E0004000 
              E0004018 
              004C4B40 
              E0004014 
              FFFFF00C 
              FFFFF200 
              FFFFF100 
              00000000 
              FFFFF010 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\timer-int.d -o.\objects\timer-int.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_
v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 516" --list=.\listings\timer-int.lst timer-i
nt.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DAbt_Handler 000000BC

Symbol: DAbt_Handler
   Definitions
      At line 174 in file timer-int.s
   Uses
      At line 36 in file timer-int.s
      At line 175 in file timer-int.s

FIQ_Handler 000000D8

Symbol: FIQ_Handler
   Definitions
      At line 197 in file timer-int.s
   Uses
      At line 39 in file timer-int.s
      At line 198 in file timer-int.s

IRQ_Handler 000000C0

Symbol: IRQ_Handler
   Definitions
      At line 180 in file timer-int.s
   Uses
      At line 38 in file timer-int.s
Comment: IRQ_Handler used once
PAbt_Handler 000000B8

Symbol: PAbt_Handler
   Definitions
      At line 168 in file timer-int.s
   Uses
      At line 35 in file timer-int.s
      At line 169 in file timer-int.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 27 in file timer-int.s
   Uses
      None
Comment: RESET unused
Reset_Handler 00000020

Symbol: Reset_Handler
   Definitions
      At line 44 in file timer-int.s
   Uses
      At line 32 in file timer-int.s
Comment: Reset_Handler used once
STOP 000000AC

Symbol: STOP
   Definitions
      At line 150 in file timer-int.s
   Uses
      At line 150 in file timer-int.s
Comment: STOP used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

SWI_Handler 000000B4

Symbol: SWI_Handler
   Definitions
      At line 162 in file timer-int.s
   Uses
      At line 34 in file timer-int.s
      At line 163 in file timer-int.s

Timer_Handler 000000DC

Symbol: Timer_Handler
   Definitions
      At line 203 in file timer-int.s
   Uses
      At line 123 in file timer-int.s
Comment: Timer_Handler used once
Undef_Handler 000000B0

Symbol: Undef_Handler
   Definitions
      At line 156 in file timer-int.s
   Uses
      At line 33 in file timer-int.s
      At line 157 in file timer-int.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 24 in file timer-int.s
   Uses
      At line 54 in file timer-int.s
Comment: F_Bit used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 23 in file timer-int.s
   Uses
      At line 54 in file timer-int.s
Comment: I_Bit used once
Irq_Stack_Size 00000080

Symbol: Irq_Stack_Size
   Definitions
      At line 19 in file timer-int.s
   Uses
      At line 56 in file timer-int.s
Comment: Irq_Stack_Size used once
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 22 in file timer-int.s
   Uses
      At line 54 in file timer-int.s
Comment: Mode_IRQ used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 21 in file timer-int.s
   Uses
      At line 59 in file timer-int.s
Comment: Mode_USR used once
T0IR E0004000

Symbol: T0IR
   Definitions
      At line 6 in file timer-int.s
   Uses
      At line 76 in file timer-int.s
      At line 208 in file timer-int.s

T0MCR E0004014

Symbol: T0MCR
   Definitions
      At line 9 in file timer-int.s
   Uses
      At line 91 in file timer-int.s
Comment: T0MCR used once
T0MR0 E0004018




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: T0MR0
   Definitions
      At line 8 in file timer-int.s
   Uses
      At line 83 in file timer-int.s
Comment: T0MR0 used once
T0TCR E0004004

Symbol: T0TCR
   Definitions
      At line 7 in file timer-int.s
   Uses
      At line 70 in file timer-int.s
      At line 137 in file timer-int.s

VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 12 in file timer-int.s
   Uses
      At line 127 in file timer-int.s
Comment: VICIntEnable used once
VICIntSelect FFFFF00C

Symbol: VICIntSelect
   Definitions
      At line 11 in file timer-int.s
   Uses
      At line 105 in file timer-int.s
Comment: VICIntSelect used once
VICVectAddr FFFFFF00

Symbol: VICVectAddr
   Definitions
      At line 15 in file timer-int.s
   Uses
      At line 185 in file timer-int.s
      At line 217 in file timer-int.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 13 in file timer-int.s
   Uses
      At line 122 in file timer-int.s
Comment: VICVectAddr0 used once
VICVectPri0 FFFFF200

Symbol: VICVectPri0
   Definitions
      At line 14 in file timer-int.s
   Uses
      At line 114 in file timer-int.s
Comment: VICVectPri0 used once
VICVectT0 00000004

Symbol: VICVectT0



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 17 in file timer-int.s
   Uses
      At line 100 in file timer-int.s
      At line 101 in file timer-int.s

15 symbols
359 symbols in table
