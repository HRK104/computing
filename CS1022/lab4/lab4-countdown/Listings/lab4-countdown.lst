


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 4 - countdown
    4 00000000         ;
    5 00000000 E0004000 
                       T0IR    EQU              0xE0004000
    6 00000000 E0004004 
                       T0TCR   EQU              0xE0004004
    7 00000000 E0004018 
                       T0MR0   EQU              0xE0004018
    8 00000000 E0004014 
                       T0MCR   EQU              0xE0004014
    9 00000000         
   10 00000000 E002C010 
                       PINSEL4 EQU              0xE002C010
   11 00000000         
   12 00000000 3FFFC041 
                       FIO2DIR1
                               EQU              0x3FFFC041
   13 00000000 3FFFC055 
                       FIO2PIN1
                               EQU              0x3FFFC055
   14 00000000         
   15 00000000 E01FC140 
                       EXTINT  EQU              0xE01FC140
   16 00000000 E01FC148 
                       EXTMODE EQU              0xE01FC148
   17 00000000 E01FC14C 
                       EXTPOLAR
                               EQU              0xE01FC14C
   18 00000000         
   19 00000000 FFFFF00C 
                       VICIntSelect
                               EQU              0xFFFFF00C
   20 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
   21 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
   22 00000000 FFFFF200 
                       VICVectPri0
                               EQU              0xFFFFF200
   23 00000000 FFFFFF00 
                       VICVectAddr
                               EQU              0xFFFFFF00
   24 00000000         
   25 00000000 00000004 
                       VICVectT0
                               EQU              4
   26 00000000 0000000E 
                       VICVectEINT0
                               EQU              14
   27 00000000         
   28 00000000 00000080 
                       Irq_Stack_Size
                               EQU              0x80
   29 00000000         
   30 00000000 00000010 



ARM Macro Assembler    Page 2 


                       Mode_USR
                               EQU              0x10
   31 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   32 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   33 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   34 00000000         
   35 00000000         
   36 00000000                 AREA             RESET, CODE, READONLY
   37 00000000                 ENTRY
   38 00000000         
   39 00000000         ; Exception Vectors
   40 00000000         
   41 00000000 EA000006        B                Reset_Handler ; 0x00000000
   42 00000004 EA000044        B                Undef_Handler ; 0x00000004
   43 00000008 EA000044        B                SWI_Handler ; 0x00000008
   44 0000000C EA000044        B                PAbt_Handler ; 0x0000000C
   45 00000010 EA000044        B                DAbt_Handler ; 0x00000010
   46 00000014 E1A00000        NOP                          ; 0x00000014
   47 00000018 EA000043        B                IRQ_Handler ; 0x00000018
   48 0000001C EA000048        B                FIQ_Handler ; 0x0000001C
   49 00000020         
   50 00000020         ;
   51 00000020         ; Reset Exception Handler
   52 00000020         ;
   53 00000020         Reset_Handler
   54 00000020         
   55 00000020         ;
   56 00000020         ; Initialize Stack Pointers (SP) for each mode we are us
                       ing
   57 00000020         ;
   58 00000020         
   59 00000020         ; Stack Top
   60 00000020 E59F01B8        LDR              R0, =0x40010000
   61 00000024         
   62 00000024         ; Enter undef mode and set initial SP
   63 00000024 E321F0D2        MSR              CPSR_c, #Mode_IRQ:OR:I_Bit:OR:F
_Bit
   64 00000028 E1A0D000        MOV              SP, R0
   65 0000002C E2400080        SUB              R0, R0, #Irq_Stack_Size
   66 00000030         
   67 00000030         ; Enter user mode and set initial SP
   68 00000030 E321F010        MSR              CPSR_c, #Mode_USR
   69 00000034 E1A0D000        MOV              SP, R0
   70 00000038         
   71 00000038         
   72 00000038         ;
   73 00000038         ; Initialise peripherals here
   74 00000038         ;
   75 00000038         
   76 00000038         ;   Initialise TIMER0 (see timer-int example)
   77 00000038         ;
   78 00000038         ; Configure TIMER0
   79 00000038         ;



ARM Macro Assembler    Page 3 


   80 00000038         ; Stop and reset TIMER0 using Timer Control Register
   81 00000038         ; Set bit 0 of TCR to 0 to stop TIMER
   82 00000038         ; Set bit 1 of TCR to 1 to reset TIMER
   83 00000038 E59F51A4        LDR              R5, =T0TCR
   84 0000003C E3A06002        LDR              R6, =0x2
   85 00000040 E5C56000        STRB             R6, [R5]
   86 00000044         ; Clear any previous TIMER0 interrupt by writing 0xFF to
                        the TIMER0
   87 00000044         ; Interrupt Register (T0IR)
   88 00000044 E59F519C        LDR              R5, =T0IR
   89 00000048 E3A060FF        LDR              R6, =0xFF
   90 0000004C E5C56000        STRB             R6, [R5]
   91 00000050         ; Set match register for 5 secs using Match Register
   92 00000050         ; Assuming a 1Mhz clock input to TIMER0, set MR
   93 00000050         ; MR0 (0xE0004018) to 5,000,000
   94 00000050 E59F4194        LDR              R4, =T0MR0
   95 00000054 E59F5194        LDR              R5, =5000000
   96 00000058 E5845000        STR              R5, [R4]
   97 0000005C         ; IRQ on match using Match Control Register
   98 0000005C         ; Set bit 0 of MCR to 1 to turn on interrupts
   99 0000005C         ; Set bit 1 of MCR to 1 to reset counter to 0 after ever
                       y match
  100 0000005C         ; Set bit 2 of MCR to 0 to leave the counter enabled aft
                       er match
  101 0000005C E59F4190        LDR              R4, =T0MCR
  102 00000060 E3A05003        LDR              R5, =0x03
  103 00000064 E1C450B0        STRH             R5, [R4]
  104 00000068         
  105 00000068         
  106 00000068         ;   Initialise VIC for TIMER0 interrupts (see timer-int 
                       example)
  107 00000068         ;
  108 00000068         ; Configure VIC for TIMER0 interrupts
  109 00000068         ;
  110 00000068         ; Useful VIC vector numbers and masks for following code
                       
  111 00000068 E3A03004        LDR              R3, =VICVectT0 ; vector 4
  112 0000006C E3A04010        LDR              R4, =(1 << VICVectT0) ; bit mas
                                                            k for vector 4
  113 00000070         ; VICIntSelect - Clear bit 4 of VICIntSelect register to
                        cause
  114 00000070         ; channel 4 (TIMER0) to raise IRQs (not FIQs)
  115 00000070 E59F5180        LDR              R5, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  116 00000074 E5956000        LDR              R6, [R5]    ; tmp = Memory.Word
                                                            (addr);
  117 00000078 E1C66004        BIC              R6, R6, R4  ; Clear bit for Vec
                                                            tor 0x04
  118 0000007C E5856000        STR              R6, [R5]    ; Memory.Word(addr)
                                                             = tmp;
  119 00000080         ; Set Priority for VIC channel 4 (TIMER0) to lowest (15)
                        by setting
  120 00000080         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 4 of an
  121 00000080         ; array of 4-byte values that starts at VICVectPri0.
  122 00000080         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  123 00000080 E59F5174        LDR              R5, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  124 00000084 E3A0600F        MOV              R6, #15     ; pri = 15;



ARM Macro Assembler    Page 4 


  125 00000088 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = pri;
  126 0000008C         ; Set Handler routine address for VIC channel 4 (TIMER0)
                        to address of
  127 0000008C         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element
  128 0000008C         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  129 0000008C         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  130 0000008C E59F516C        LDR              R5, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  131 00000090 E59F616C        LDR              R6, =Timer_Handler ; handler = 
                                                            address of TimerHan
                                                            dler;
  132 00000094 E7856103        STR              R6, [R5, R3, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  133 00000098         ; Enable VIC channel 4 (TIMER0) by writing a 1 to bit 4 
                       of VICIntEnable
  134 00000098 E59F5168        LDR              R5, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  135 0000009C E5854000        STR              R4, [R5]    ; enable interrupts
                                                             for vector 0x4
  136 000000A0         
  137 000000A0         
  138 000000A0         ;   Initialise P2.10 for EINT0 (see button-int example)
  139 000000A0         ;
  140 000000A0         ; Configure P2.10 for EINT0
  141 000000A0         ;
  142 000000A0         ; Enable P2.10 for GPIO
  143 000000A0 E59F4164        LDR              R4, =PINSEL4
  144 000000A4 E5945000        LDR              R5, [R4]    ; read current valu
                                                            e
  145 000000A8 E3C55603        BIC              R5, #(0x03 << 20) 
                                                            ; clear bits 21:20
  146 000000AC E3855601        ORR              R5, #(0x01 << 20) ; set bits 21
                                                            :20 to 01
  147 000000B0 E5845000        STR              R5, [R4]    ; write new value
  148 000000B4         ; Set edge-sensitive mode for EINT0
  149 000000B4 E59F4154        LDR              R4, =EXTMODE
  150 000000B8 E5945000        LDR              R5, [R4]    ; read
  151 000000BC E3855001        ORR              R5, #1      ; modify
  152 000000C0 E5C45000        STRB             R5, [R4]    ; write
  153 000000C4         ; Set rising-edge mode for EINT0
  154 000000C4 E59F4148        LDR              R4, =EXTPOLAR
  155 000000C8 E5945000        LDR              R5, [R4]    ; read
  156 000000CC E3C55001        BIC              R5, #1      ; modify
  157 000000D0 E5C45000        STRB             R5, [R4]    ; write
  158 000000D4         ; Reset EINT0
  159 000000D4 E59F413C        LDR              R4, =EXTINT
  160 000000D8 E3A05001        MOV              R5, #1
  161 000000DC E5C45000        STRB             R5, [R4]
  162 000000E0         
  163 000000E0         
  164 000000E0         ;   Initialise VIC for EINT0 interrupts (see button-int 
                       example)
  165 000000E0         ;
  166 000000E0         ; Configure VIC for EINT0 interrupts



ARM Macro Assembler    Page 5 


  167 000000E0         ;
  168 000000E0         ; Useful VIC vector numbers and masks for following code
                       
  169 000000E0 E3A0400E        LDR              R4, =VICVectEINT0 ; vector 4
  170 000000E4 E3A05901        LDR              R5, =(1 << VICVectEINT0) ; bit 
                                                            mask for vector 14
  171 000000E8         ; VICIntSelect - Clear bit 4 of VICIntSelect register to
                        cause
  172 000000E8         ; channel 14 (EINT0) to raise IRQs (not FIQs)
  173 000000E8 E59F6108        LDR              R6, =VICIntSelect ; addr = VICV
                                                            ectSelect;
  174 000000EC E5967000        LDR              R7, [R6]    ; tmp = Memory.Word
                                                            (addr);
  175 000000F0 E1C77005        BIC              R7, R7, R5  ; Clear bit for Vec
                                                            tor 14
  176 000000F4 E5867000        STR              R7, [R6]    ; Memory.Word(addr)
                                                             = tmp;
  177 000000F8         ; Set Priority for VIC channel 14 (EINT0) to lowest (15)
                        by setting
  178 000000F8         ; VICVectPri4 to 15. Note: VICVectPri4 is the element at
                        index 14 of an
  179 000000F8         ; array of 4-byte values that starts at VICVectPri0.
  180 000000F8         ; i.e. VICVectPri4=VICVectPri0+(4*4)
  181 000000F8 E59F60FC        LDR              R6, =VICVectPri0 ; addr = VICVe
                                                            ctPri0;
  182 000000FC E3A0700F        MOV              R7, #15     ; pri = 15;
  183 00000100 E7867104        STR              R7, [R6, R4, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = pri;
  184 00000104         ; Set Handler routine address for VIC channel 4 (TIMER0)
                        to address of
  185 00000104         ; our handler routine (TimerHandler). Note: VICVectAddr4
                        is the element
  186 00000104         ; at index 4 of an array of 4-byte values that starts at
                        VICVectAddr0.
  187 00000104         ; i.e. VICVectAddr4=VICVectAddr0+(4*4)
  188 00000104 E59F60F4        LDR              R6, =VICVectAddr0 ; addr = VICV
                                                            ectAddr0;
  189 00000108 E59F710C        LDR              R7, =Button_Handler ; handler =
                                                             address of TimerHa
                                                            ndler;
  190 0000010C E7867104        STR              R7, [R6, R4, LSL #2] ; Memory.W
                                                            ord(addr + vector *
                                                             4) = handler
  191 00000110         ; Enable VIC channel 14 (EINT0) by writing a 1 to bit 4 
                       of VICIntEnable
  192 00000110 E59F60F0        LDR              R6, =VICIntEnable ; addr = VICI
                                                            ntEnable;
  193 00000114 E5865000        STR              R5, [R6]    ; enable interrupts
                                                             for vector 14
  194 00000118         
  195 00000118         ;   Don't start TIMER0 yet!! We're waiting for a button 
                       press
  196 00000118         ;
  197 00000118         
  198 00000118         
  199 00000118         
  200 00000118 EAFFFFFE 
                       STOP    B                STOP



ARM Macro Assembler    Page 6 


  201 0000011C         
  202 0000011C         
  203 0000011C         ;
  204 0000011C         ; Software Interrupt Exception Handler
  205 0000011C         ;
  206 0000011C         Undef_Handler
  207 0000011C EAFFFFFE        B                Undef_Handler
  208 00000120         
  209 00000120         ;
  210 00000120         ; Software Interrupt Exception Handler
  211 00000120         ;
  212 00000120         SWI_Handler
  213 00000120 EAFFFFFE        B                SWI_Handler
  214 00000124         
  215 00000124         ;
  216 00000124         ; Prefetch Abort Exception Handler
  217 00000124         ;
  218 00000124         PAbt_Handler
  219 00000124 EAFFFFFE        B                PAbt_Handler
  220 00000128         
  221 00000128         ;
  222 00000128         ; Data Abort Exception Handler
  223 00000128         ;
  224 00000128         DAbt_Handler
  225 00000128 EAFFFFFE        B                DAbt_Handler
  226 0000012C         
  227 0000012C         ;
  228 0000012C         ; Interrupt ReQuest (IRQ) Exception Handler (top level -
                        all devices)
  229 0000012C         ;
  230 0000012C         IRQ_Handler
  231 0000012C E24EE004        SUB              lr, lr, #4  ; for IRQs, LR is a
                                                            lways 4 more than t
                                                            he
  232 00000130         ; real return address
  233 00000130 E92D400F        STMFD            sp!, {r0-r3,lr} 
                                                            ; save r0-r3 and lr
                                                            
  234 00000134         
  235 00000134 E3E000FF        LDR              r0, =VICVectAddr ; address of V
                                                            IC Vector Address m
                                                            emory-
  236 00000138         ; mapped register
  237 00000138         
  238 00000138 E1A0E00F        MOV              lr, pc      ; can’t use BL he
                                                            re because we are b
                                                            ranching
  239 0000013C E590F000        LDR              pc, [r0]    ; to a different su
                                                            broutine dependant 
                                                            on device
  240 00000140         ; raising the IRQ - this is a manual BL !!
  241 00000140         
  242 00000140 E8FD800F        LDMFD            sp!, {r0-r3, pc}^ ; restore r0-
                                                            r3, lr and CPSR
  243 00000144         
  244 00000144         ;
  245 00000144         ; Fast Interrupt reQuest Exception Handler
  246 00000144         ;
  247 00000144         FIQ_Handler



ARM Macro Assembler    Page 7 


  248 00000144 EAFFFFFE        B                FIQ_Handler
  249 00000148         
  250 00000148         
  251 00000148         ;
  252 00000148         ; TIMER0 IRQ Handler (device-specific handler called by 
                       top-level IRQ_Handler)
  253 00000148         ;
  254 00000148         Timer_Handler
  255 00000148         
  256 00000148 E92D4030        STMFD            sp!, {r4-r5, lr}
  257 0000014C         
  258 0000014C         ;
  259 0000014C         ; your timer irq handler goes here
  260 0000014C         ; see timer-int example to see how to handle TIMER inter
                       rupts
  261 0000014C         ; load the current time, decrement, store back to memory
                       
  262 0000014C         ;
  263 0000014C         ; if the time is 0, reconfigure P2.10 as GPIO output and
                        turn
  264 0000014C         ;   on the LED
  265 0000014C         ;
  266 0000014C         
  267 0000014C         
  268 0000014C         ; Reset TIMER0 interrupt by writing 0xFF to T0IR
  269 0000014C E59F4094        LDR              R4, =T0IR
  270 00000150 E3A050FF        MOV              R5, #0xFF
  271 00000154 E5C45000        STRB             R5, [R4]
  272 00000158         
  273 00000158         ;
  274 00000158         ; take some action here when the timer expires!
  275 00000158         ;
  276 00000158         
  277 00000158         ; Enable P2.10 for GPIO
  278 00000158 E59F50AC        LDR              R5, =PINSEL4 ; load address of 
                                                            PINSEL4
  279 0000015C E5956000        LDR              R6, [R5]    ; read current PINS
                                                            EL4 value
  280 00000160 E3C66603        BIC              R6, #(0x3 << 20) ; modify bits 
                                                            20 and 21 to 00
  281 00000164 E5856000        STR              R6, [R5]    ; write new PINSEL4
                                                             value
  282 00000168         
  283 00000168         ; Set P2.10 for output
  284 00000168 E59F50B0        LDR              R5, =FIO2DIR1 ; load address of
                                                             FIO2DIR1
  285 0000016C E5D56000        LDRB             R6, [R5]    ; read current FIO2
                                                            DIR1 value
  286 00000170 E3866004        ORR              R6, #(0x1 << 2) ; modify bit 2 
                                                            to 1 for output, le
                                                            aving other bits un
                                                            modified
  287 00000174 E5C56000        STRB             R6, [R5]    ; write new FIO2DIR
                                                            1
  288 00000178         
  289 00000178         
  290 00000178         
  291 00000178         
  292 00000178         ; Clear source of interrupt by writing 0 to VICVectAddr



ARM Macro Assembler    Page 8 


  293 00000178 E3E040FF        LDR              R4, =VICVectAddr
  294 0000017C E3A05000        MOV              R5, #0
  295 00000180 E5845000        STR              R5, [R4]
  296 00000184         
  297 00000184 E8BD8030        LDMFD            sp!, {r4-r5, pc}
  298 00000188         
  299 00000188         
  300 00000188         ;
  301 00000188         ; EINT0 IRQ Handler (device-specific handler called by t
                       op-level IRQ_Handler)
  302 00000188         ;
  303 00000188         Button_Handler
  304 00000188         
  305 00000188 E92D4030        STMFD            sp!, {r4-r5, lr}
  306 0000018C         
  307 0000018C         ;
  308 0000018C         ; your EINT0 (button) irq handler goes here
  309 0000018C         ; see button-int example to see how to handle EINT0 inte
                       rrupts
  310 0000018C         ;
  311 0000018C         ; if this is he first press, you need to start TIMER0
  312 0000018C         ;   and set the remaining time to 5 seconds
  313 0000018C         ;
  314 0000018C         ; otherwise, you need to add another 5 seconds to the re
                       maining time
  315 0000018C         ;
  316 0000018C         ; remember, changing the remaining time means loading th
                       e remaining
  317 0000018C         ;   time, changing it and storing it back again
  318 0000018C         ;
  319 0000018C         
  320 0000018C         
  321 0000018C         ; Reset EINT0 interrupt by writing 1 to EXTINT register
  322 0000018C E59F4084        LDR              R4, =EXTINT
  323 00000190 E3A05001        MOV              R5, #1
  324 00000194 E5C45000        STRB             R5, [R4]
  325 00000198         
  326 00000198         ;check whether this is the first pass or not
  327 00000198 E59F4044        LDR              R4, =T0TCR
  328 0000019C E5946000        LDR              R6,[R4]
  329 000001A0 E3A05002        LDR              R5, =0x2
  330 000001A4 E1550006        CMP              R5,R6
  331 000001A8 1A000003        BNE              IncrementCount
  332 000001AC         
  333 000001AC         ;
  334 000001AC         ; Finally ... start TIMER0
  335 000001AC         ;
  336 000001AC         ; Start TIMER0 using the Timer Control Register
  337 000001AC         ; Set bit 0 of TCR (0xE0004004) to enable the timer
  338 000001AC E59F4030        LDR              R4, =T0TCR
  339 000001B0 E3A05001        LDR              R5, =0x01
  340 000001B4 E5C45000        STRB             R5, [R4]
  341 000001B8 EA000004        B                ClearSourceOfInterrupt
  342 000001BC         
  343 000001BC         ;
  344 000001BC         ; Increment Count
  345 000001BC         ;
  346 000001BC         IncrementCount
  347 000001BC         ;LDR R4, =time  ; addr = count



ARM Macro Assembler    Page 9 


  348 000001BC         ;LDR R5, [R4]  ; tmp_count = Memory.Word(addr);
  349 000001BC E59F4028        LDR              R4, =T0MR0
  350 000001C0 E59F5028        LDR              R5, =5000000
  351 000001C4 E5946000        LDR              R6,[R4]
  352 000001C8 E0865005        ADD              R5,R6,R5
  353 000001CC         ;ADD R5, R5, #5  ; increment count;
  354 000001CC E5845000        STR              R5, [R4]    ; Memory.Word(addr)
                                                             = tmp_count;
  355 000001D0         
  356 000001D0         ;
  357 000001D0         ; Clear source of interrupt
  358 000001D0         ;
  359 000001D0         ClearSourceOfInterrupt
  360 000001D0 E3E040FF        LDR              R4, =VICVectAddr ; addr = VICVe
                                                            ctAddr
  361 000001D4 E3A05000        MOV              R5, #0      ; tmp = 0;
  362 000001D8 E5845000        STR              R5, [R4]    ; Memory.Word(addr)
                                                             = tmp;
  363 000001DC         
  364 000001DC         
  365 000001DC E8BD8030        LDMFD            sp!, {r4-r5, pc}
  366 000001E0         
  367 000001E0         
  368 000001E0 40010000 
              E0004004 
              E0004000 
              E0004018 
              004C4B40 
              E0004014 
              FFFFF00C 
              FFFFF200 
              FFFFF100 
              00000000 
              FFFFF010 
              E002C010 
              E01FC148 
              E01FC14C 
              E01FC140 
              00000000 
              3FFFC041         AREA             TestData, DATA, READWRITE
  369 00000000         
  370 00000000 00 00 00 
              00       time    SPACE            4
  371 00000004         
  372 00000004         
  373 00000004                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab4-countdown.d -o.\objects\lab4-countdown.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab4-countd
own.lst lab4-countdown.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Button_Handler 00000188

Symbol: Button_Handler
   Definitions
      At line 303 in file lab4-countdown.s
   Uses
      At line 189 in file lab4-countdown.s
Comment: Button_Handler used once
ClearSourceOfInterrupt 000001D0

Symbol: ClearSourceOfInterrupt
   Definitions
      At line 359 in file lab4-countdown.s
   Uses
      At line 341 in file lab4-countdown.s
Comment: ClearSourceOfInterrupt used once
DAbt_Handler 00000128

Symbol: DAbt_Handler
   Definitions
      At line 224 in file lab4-countdown.s
   Uses
      At line 45 in file lab4-countdown.s
      At line 225 in file lab4-countdown.s

FIQ_Handler 00000144

Symbol: FIQ_Handler
   Definitions
      At line 247 in file lab4-countdown.s
   Uses
      At line 48 in file lab4-countdown.s
      At line 248 in file lab4-countdown.s

IRQ_Handler 0000012C

Symbol: IRQ_Handler
   Definitions
      At line 230 in file lab4-countdown.s
   Uses
      At line 47 in file lab4-countdown.s
Comment: IRQ_Handler used once
IncrementCount 000001BC

Symbol: IncrementCount
   Definitions
      At line 346 in file lab4-countdown.s
   Uses
      At line 331 in file lab4-countdown.s
Comment: IncrementCount used once
PAbt_Handler 00000124

Symbol: PAbt_Handler
   Definitions
      At line 218 in file lab4-countdown.s
   Uses
      At line 44 in file lab4-countdown.s
      At line 219 in file lab4-countdown.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 36 in file lab4-countdown.s
   Uses
      None
Comment: RESET unused
Reset_Handler 00000020

Symbol: Reset_Handler
   Definitions
      At line 53 in file lab4-countdown.s
   Uses
      At line 41 in file lab4-countdown.s
Comment: Reset_Handler used once
STOP 00000118

Symbol: STOP
   Definitions
      At line 200 in file lab4-countdown.s
   Uses
      At line 200 in file lab4-countdown.s
Comment: STOP used once
SWI_Handler 00000120

Symbol: SWI_Handler
   Definitions
      At line 212 in file lab4-countdown.s
   Uses
      At line 43 in file lab4-countdown.s
      At line 213 in file lab4-countdown.s

Timer_Handler 00000148

Symbol: Timer_Handler
   Definitions
      At line 254 in file lab4-countdown.s
   Uses
      At line 131 in file lab4-countdown.s
Comment: Timer_Handler used once
Undef_Handler 0000011C

Symbol: Undef_Handler
   Definitions
      At line 206 in file lab4-countdown.s
   Uses
      At line 42 in file lab4-countdown.s
      At line 207 in file lab4-countdown.s

13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 368 in file lab4-countdown.s
   Uses
      None
Comment: TestData unused
time 00000000

Symbol: time
   Definitions
      At line 370 in file lab4-countdown.s
   Uses
      None
Comment: time unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

EXTINT E01FC140

Symbol: EXTINT
   Definitions
      At line 15 in file lab4-countdown.s
   Uses
      At line 159 in file lab4-countdown.s
      At line 322 in file lab4-countdown.s

EXTMODE E01FC148

Symbol: EXTMODE
   Definitions
      At line 16 in file lab4-countdown.s
   Uses
      At line 149 in file lab4-countdown.s
Comment: EXTMODE used once
EXTPOLAR E01FC14C

Symbol: EXTPOLAR
   Definitions
      At line 17 in file lab4-countdown.s
   Uses
      At line 154 in file lab4-countdown.s
Comment: EXTPOLAR used once
FIO2DIR1 3FFFC041

Symbol: FIO2DIR1
   Definitions
      At line 12 in file lab4-countdown.s
   Uses
      At line 284 in file lab4-countdown.s
Comment: FIO2DIR1 used once
FIO2PIN1 3FFFC055

Symbol: FIO2PIN1
   Definitions
      At line 13 in file lab4-countdown.s
   Uses
      None
Comment: FIO2PIN1 unused
F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 33 in file lab4-countdown.s
   Uses
      At line 63 in file lab4-countdown.s
Comment: F_Bit used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 32 in file lab4-countdown.s
   Uses
      At line 63 in file lab4-countdown.s
Comment: I_Bit used once
Irq_Stack_Size 00000080




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: Irq_Stack_Size
   Definitions
      At line 28 in file lab4-countdown.s
   Uses
      At line 65 in file lab4-countdown.s
Comment: Irq_Stack_Size used once
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 31 in file lab4-countdown.s
   Uses
      At line 63 in file lab4-countdown.s
Comment: Mode_IRQ used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 30 in file lab4-countdown.s
   Uses
      At line 68 in file lab4-countdown.s
Comment: Mode_USR used once
PINSEL4 E002C010

Symbol: PINSEL4
   Definitions
      At line 10 in file lab4-countdown.s
   Uses
      At line 143 in file lab4-countdown.s
      At line 278 in file lab4-countdown.s

T0IR E0004000

Symbol: T0IR
   Definitions
      At line 5 in file lab4-countdown.s
   Uses
      At line 88 in file lab4-countdown.s
      At line 269 in file lab4-countdown.s

T0MCR E0004014

Symbol: T0MCR
   Definitions
      At line 8 in file lab4-countdown.s
   Uses
      At line 101 in file lab4-countdown.s
Comment: T0MCR used once
T0MR0 E0004018

Symbol: T0MR0
   Definitions
      At line 7 in file lab4-countdown.s
   Uses
      At line 94 in file lab4-countdown.s
      At line 349 in file lab4-countdown.s

T0TCR E0004004




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: T0TCR
   Definitions
      At line 6 in file lab4-countdown.s
   Uses
      At line 83 in file lab4-countdown.s
      At line 327 in file lab4-countdown.s
      At line 338 in file lab4-countdown.s

VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 20 in file lab4-countdown.s
   Uses
      At line 134 in file lab4-countdown.s
      At line 192 in file lab4-countdown.s

VICIntSelect FFFFF00C

Symbol: VICIntSelect
   Definitions
      At line 19 in file lab4-countdown.s
   Uses
      At line 115 in file lab4-countdown.s
      At line 173 in file lab4-countdown.s

VICVectAddr FFFFFF00

Symbol: VICVectAddr
   Definitions
      At line 23 in file lab4-countdown.s
   Uses
      At line 235 in file lab4-countdown.s
      At line 293 in file lab4-countdown.s
      At line 360 in file lab4-countdown.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 21 in file lab4-countdown.s
   Uses
      At line 130 in file lab4-countdown.s
      At line 188 in file lab4-countdown.s

VICVectEINT0 0000000E

Symbol: VICVectEINT0
   Definitions
      At line 26 in file lab4-countdown.s
   Uses
      At line 169 in file lab4-countdown.s
      At line 170 in file lab4-countdown.s

VICVectPri0 FFFFF200

Symbol: VICVectPri0
   Definitions
      At line 22 in file lab4-countdown.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 123 in file lab4-countdown.s
      At line 181 in file lab4-countdown.s

VICVectT0 00000004

Symbol: VICVectT0
   Definitions
      At line 25 in file lab4-countdown.s
   Uses
      At line 111 in file lab4-countdown.s
      At line 112 in file lab4-countdown.s

22 symbols
371 symbols in table
