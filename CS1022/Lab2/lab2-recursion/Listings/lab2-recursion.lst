


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 2 - Recursion
    4 00000000         ;
    5 00000000         
    6 00000000 0000000A 
                       N       EQU              10
    7 00000000         
    8 00000000                 AREA             globals, DATA, READWRITE
    9 00000000         
   10 00000000         ; N word-size values
   11 00000000         
   12 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       SORTED  SPACE            N*4         ; N words (4 bytes 
                                                            each)
   13 00000028         
   14 00000028         
   15 00000028                 AREA             RESET, CODE, READONLY
   16 00000000                 ENTRY
   17 00000000         
   18 00000000         ;
   19 00000000         ; copy the test data into RAM
   20 00000000         ;
   21 00000000         
   22 00000000 E59F40C0        LDR              R4, =SORTED
   23 00000004 E59F50C0        LDR              R5, =UNSORT
   24 00000008 E3A06000        LDR              R6, =0
   25 0000000C E356000A 
                       whInit  CMP              R6, #N
   26 00000010 2A000003        BHS              eWhInit
   27 00000014 E7957106        LDR              R7, [R5, R6, LSL #2]
   28 00000018 E7847106        STR              R7, [R4, R6, LSL #2]
   29 0000001C E2866001        ADD              R6, R6, #1
   30 00000020 EAFFFFF9        B                whInit
   31 00000024         eWhInit
   32 00000024         
   33 00000024         
   34 00000024         ;
   35 00000024         ; call your sort subroutine to test it
   36 00000024         ;
   37 00000024         
   38 00000024 E59F009C        LDR              R0, =SORTED
   39 00000028 E3A0100A        LDR              R1, =N
   40 0000002C EB000007        BL               sort
   41 00000030 EAFFFFFE 
                       STOP    B                STOP
   42 00000034         



ARM Macro Assembler    Page 2 


   43 00000034         
   44 00000034         ;
   45 00000034         ; your swap subroutine goes here
   46 00000034         ;
   47 00000034         
   48 00000034         ; swap subroutine
   49 00000034         ; Swap two elements in a 1-dimensional array of word-siz
                       e integers
   50 00000034         ; parameters
   51 00000034         ;    R0: the adress of array
   52 00000034         ;    R1: the index of first element
   53 00000034         ;    R2: the index of second index
   54 00000034         ; return
   55 00000034         ;    nothing
   56 00000034         
   57 00000034         swap
   58 00000034 E92D0030        PUSH{R4,R5}
   59 00000038         swap1
   60 00000038 E7904101        LDR              R4,[R0, R1, LSL #2]
   61 0000003C E7905102        LDR              R5,[R0, R2, LSL #2]
   62 00000040 E7805101        STR              R5,[R0, R1, LSL #2]
   63 00000044 E7804102        STR              R4,[R0, R2, LSL #2]
   64 00000048         endSwap
   65 00000048 E8BD0030        POP{R4,R5}
   66 0000004C E12FFF1E        BX               LR
   67 00000050         
   68 00000050         ;
   69 00000050         ; your sort subroutine goes here
   70 00000050         ;
   71 00000050         
   72 00000050         ; sort subroutine
   73 00000050         ; Call swap subroutines at fixed times
   74 00000050         ; parameters
   75 00000050         ;    R0: the adress of array
   76 00000050         ;    R1: the number of calling swap subroutines
   77 00000050         sort
   78 00000050 E92D45F0        PUSH{R4,R5,R6,R7,R8,R10,LR}
   79 00000054 E1A0A001        MOV              R10,R1
   80 00000058         sort1
   81 00000058 E3A04000        MOV              R4,#0       ;boolean swapped = 
                                                            false
   82 0000005C E3A05001        MOV              R5,#1       ;for(i=1
   83 00000060         sort4
   84 00000060 E155000A        CMP              R5,R10      ;        ;i<N
   85 00000064 2A00000A        BHS              sort2       ;{
   86 00000068 E2456001        SUB              R6,R5,#1    ;i-1
   87 0000006C E7907106        LDR              R7,[R0, R6, LSL #2] 
                                                            ;array[i-1] 
   88 00000070 E7908105        LDR              R8,[R0, R5, LSL #2] ;array[i] 
   89 00000074 E1570008        CMP              R7,R8       ;if(array[i-1] >arr
                                                            ay[i])
   90 00000078 BA000003        BLT              sort3       ;{
   91 0000007C E1A01006        MOV              R1,R6       ;R1 = i-1 as a para
                                                            meter of swap subro
                                                            utines
   92 00000080 E1A02005        MOV              R2,R5       ;R2 = i as a parame
                                                            ter of swap subrout
                                                            ines
   93 00000084 EBFFFFEA        BL               swap



ARM Macro Assembler    Page 3 


   94 00000088 E3A04001        MOV              R4,#1       ;boolean swapped = 
                                                            true
   95 0000008C         sort3                                ;}
   96 0000008C E2855001        ADD              R5,R5, #1   ;i++ 
   97 00000090 EAFFFFF2        B                sort4       ;}
   98 00000094         sort2
   99 00000094 E3540001        CMP              R4,#1       ;while(swapped)
  100 00000098 0AFFFFEE        BEQ              sort1       ;
  101 0000009C         endSort
  102 0000009C E8BD85F0        POP{R4,R5,R6,R7,R8,R10,PC}
  103 000000A0         
  104 000000A0         
  105 000000A0 00000009 
              00000003 
              00000000 
              00000001 
              00000006 
              00000002 
              00000004 
              00000007 
              00000008 
              00000005 UNSORT  DCD              9,3,0,1,6,2,4,7,8,5
  106 000000C8         
  107 000000C8                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab2-recursion.d -o.\objects\lab2-recursion.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab2-recurs
ion.lst lab2-recursion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SORTED 00000000

Symbol: SORTED
   Definitions
      At line 12 in file lab2-recursion.s
   Uses
      At line 22 in file lab2-recursion.s
      At line 38 in file lab2-recursion.s

globals 00000000

Symbol: globals
   Definitions
      At line 8 in file lab2-recursion.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 15 in file lab2-recursion.s
   Uses
      None
Comment: RESET unused
STOP 00000030

Symbol: STOP
   Definitions
      At line 41 in file lab2-recursion.s
   Uses
      At line 41 in file lab2-recursion.s
Comment: STOP used once
UNSORT 000000A0

Symbol: UNSORT
   Definitions
      At line 105 in file lab2-recursion.s
   Uses
      At line 23 in file lab2-recursion.s
Comment: UNSORT used once
eWhInit 00000024

Symbol: eWhInit
   Definitions
      At line 31 in file lab2-recursion.s
   Uses
      At line 26 in file lab2-recursion.s
Comment: eWhInit used once
endSort 0000009C

Symbol: endSort
   Definitions
      At line 101 in file lab2-recursion.s
   Uses
      None
Comment: endSort unused
endSwap 00000048

Symbol: endSwap
   Definitions
      At line 64 in file lab2-recursion.s
   Uses
      None
Comment: endSwap unused
sort 00000050

Symbol: sort
   Definitions
      At line 77 in file lab2-recursion.s
   Uses
      At line 40 in file lab2-recursion.s
Comment: sort used once
sort1 00000058

Symbol: sort1



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 80 in file lab2-recursion.s
   Uses
      At line 100 in file lab2-recursion.s
Comment: sort1 used once
sort2 00000094

Symbol: sort2
   Definitions
      At line 98 in file lab2-recursion.s
   Uses
      At line 85 in file lab2-recursion.s
Comment: sort2 used once
sort3 0000008C

Symbol: sort3
   Definitions
      At line 95 in file lab2-recursion.s
   Uses
      At line 90 in file lab2-recursion.s
Comment: sort3 used once
sort4 00000060

Symbol: sort4
   Definitions
      At line 83 in file lab2-recursion.s
   Uses
      At line 97 in file lab2-recursion.s
Comment: sort4 used once
swap 00000034

Symbol: swap
   Definitions
      At line 57 in file lab2-recursion.s
   Uses
      At line 93 in file lab2-recursion.s
Comment: swap used once
swap1 00000038

Symbol: swap1
   Definitions
      At line 59 in file lab2-recursion.s
   Uses
      None
Comment: swap1 unused
whInit 0000000C

Symbol: whInit
   Definitions
      At line 25 in file lab2-recursion.s
   Uses
      At line 30 in file lab2-recursion.s
Comment: whInit used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 0000000A

Symbol: N
   Definitions
      At line 6 in file lab2-recursion.s
   Uses
      At line 12 in file lab2-recursion.s
      At line 25 in file lab2-recursion.s
      At line 39 in file lab2-recursion.s

1 symbol
351 symbols in table
