


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 2 - Subroutines
    4 00000000         ;
    5 00000000         
    6 00000000         
    7 00000000 00000004 
                       N       EQU              4
    8 00000000 00000020 
                       BUFLEN  EQU              32
    9 00000000         
   10 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   11 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   12 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   13 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   14 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   15 00000000         
   16 00000000         
   17 00000000                 AREA             globals, DATA, READWRITE
   18 00000000         
   19 00000000         ; char buffer
   20 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    BUFFER  SPACE            BUFLEN      ; BUFLEN bytes
   21 00000020         
   22 00000020         ; result array
   23 00000020 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       ARR_R   SPACE            N*4         ; N words (4 bytes 
                                                            each)
   24 00000030         
   25 00000030         
   26 00000030                 AREA             RESET, CODE, READONLY
   27 00000000                 ENTRY
   28 00000000         
   29 00000000 EB000047        BL               inithw
   30 00000004         
   31 00000004         ;
   32 00000004         ; invoke your max subroutine to test it
   33 00000004         ;
   34 00000004         
   35 00000004 E3A00105        LDR              R0,=0x40000001 ;set parameter i
                                                            nt a



ARM Macro Assembler    Page 2 


   36 00000008 E3A01109        LDR              R1,=0x40000002 ;set parameter i
                                                            nt b
   37 0000000C EB000008        BL               max
   38 00000010         
   39 00000010         ;
   40 00000010         ; invoke your gets subroutine to test it
   41 00000010         ;
   42 00000010         
   43 00000010 E59F0228        LDR              R0,=BUFFER  ;set parameter char
                                                             [] buffer
   44 00000014 E3A01020        LDR              R1,=BUFLEN  ;set parameter unsi
                                                            gned int len
   45 00000018 EB00000F        BL               gets
   46 0000001C         
   47 0000001C         
   48 0000001C         ;
   49 0000001C         ; invoke your matmul subroutine to test it
   50 0000001C         ;
   51 0000001C         
   52 0000001C E59F0220        LDR              R0, =ARR_A  ;set parameter int 
                                                            [][] matrix_a
   53 00000020 E59F1220        LDR              R1, =ARR_B  ;set parameter int 
                                                            [][] matrix_b
   54 00000024 E59F2220        LDR              R2, =ARR_R  ;parameter int [][]
                                                             result
   55 00000028 E3A03004        LDR              R3, =N      ;set parametr int N
                                                            
   56 0000002C EB00001C        BL               matmul
   57 00000030         
   58 00000030 EAFFFFFE 
                       STOP    B                STOP
   59 00000034         
   60 00000034         
   61 00000034         ;
   62 00000034         ; your max subroutine goes here
   63 00000034         ;
   64 00000034         
   65 00000034         ; max subroutine
   66 00000034         ; determine the maximumnumber
   67 00000034         ; parameters
   68 00000034         ;    r0: a – address of first number
   69 00000034         ;    r1: b – address of second number
   70 00000034         ; return 
   71 00000034         ;    r0: maximum - address of maximum number
   72 00000034         max
   73 00000034 E1500001        CMP              R0,R1
   74 00000038 BA000001        BLT              max2
   75 0000003C CA000002        BGT              max3
   76 00000040 EA000003        B                max4
   77 00000044         max2
   78 00000044 E1A00001        MOV              R0,R1
   79 00000048 EA000002        B                emdMax
   80 0000004C         max3
   81 0000004C E1A00000        MOV              R0,R0
   82 00000050 EA000000        B                emdMax
   83 00000054         max4
   84 00000054 E3A00000        MOV              R0,#0
   85 00000058         emdMax
   86 00000058 E12FFF1E        BX               LR



ARM Macro Assembler    Page 3 


   87 0000005C         ;   PUSH {R4-R8}
   88 0000005C         ;   MOV R4,#31
   89 0000005C         ;   MOV R5,#0
   90 0000005C         ;   MOV R6,#0
   91 0000005C         ;   MOV R7,#0
   92 0000005C         ;   MOV R8,#0
   93 0000005C         ;   LDR R9,=0xFFFFFFFE
   94 0000005C         ;max1  
   95 0000005C         ;   CMP R4,#0
   96 0000005C         ;   BEQ max4
   97 0000005C         ;   LDR R7,[R5,R0, LSR #31]
   98 0000005C         ;   BIC R7,R7,R9
   99 0000005C         ;   LDR R8,[R6,R1, LSR #31]
  100 0000005C         ;   BIC R8,R8,R9
  101 0000005C         ;   SUB R4,R4,#1
  102 0000005C         ;   CMP R7,R8
  103 0000005C         ;   BEQ max1
  104 0000005C         ;   BHS max2
  105 0000005C         ;   BLS max3
  106 0000005C         ;max2
  107 0000005C         ;   MOV R0,R0
  108 0000005C         ;   B   max5
  109 0000005C         ;max3
  110 0000005C         ;   MOV R0,R1
  111 0000005C         ;   B   max5
  112 0000005C         ;max4
  113 0000005C         ;   MOV R0,#0
  114 0000005C         ;max5
  115 0000005C         ;   POP {R4-R8}
  116 0000005C         ;  BX LR
  117 0000005C         
  118 0000005C         
  119 0000005C         
  120 0000005C         ;
  121 0000005C         ; your gets subroutine goes here
  122 0000005C         ;
  123 0000005C         
  124 0000005C         ; gets subroutine
  125 0000005C         ; read up to len-1 chars from from the console, storing 
                       the resulting NULL-terminated string in buffer and retur
                       ning the number of characters read
  126 0000005C         ; parameters
  127 0000005C         ;    r1: char[] buffer – array are going to contain NULL
                       -terminated string 
  128 0000005C         ;    r0: unsigned int len – address of the conter read u
                       p from console
  129 0000005C         ; return
  130 0000005C         ;    r0: number - number of characters read
  131 0000005C         gets
  132 0000005C E92D4030        PUSH{R4,R5,LR}
  133 00000060 E1A04000        MOV              R4,R0       ;R4 = R0 = address 
                                                            of the buffer array
                                                            
  134 00000064 E1A05001        MOV              R5,R1       ;R5 = R4 = length o
                                                            f console
  135 00000068 E3A00000        MOV              R0,#0       ;R0 = 0
  136 0000006C E3A01000        MOV              R1,#0       ;R1 =0
  137 00000070 E2455001        SUB              R5,R5,#1    ;R5--
  138 00000074 E3A06001        MOV              R6,#1       ;R6 = 1 count



ARM Macro Assembler    Page 4 


  139 00000078         gets1
  140 00000078 E1560005        CMP              R6,R5       ;R6>R5?
  141 0000007C CA000006        BGT              endGets     ;if so, go to endGe
                                                            ts
  142 00000080 EB00002E        BL               get
  143 00000084 EB000034        BL               put
  144 00000088 E4C40001        STRB             R0,[R4],#1  ;storing the result
                                                            ing NULL-terminated
                                                             string in buffer
  145 0000008C E3500000        CMP              R0,0x00
  146 00000090 0A000001        BEQ              endGets
  147 00000094 E2866001        ADD              R6,R6,#1    ;R6++
  148 00000098 EAFFFFF6        B                gets1
  149 0000009C         endGets
  150 0000009C E1A00005        MOV              R0,R5       ;return the number 
                                                            of characters read
  151 000000A0 E8BD8030        POP              {R4,R5,PC}
  152 000000A4         
  153 000000A4         
  154 000000A4         ;
  155 000000A4         ; your matmul subroutine goes here
  156 000000A4         ;
  157 000000A4         
  158 000000A4         ; matmul subroutine
  159 000000A4         ; multiply two N × N matrices, storing the result in a t
                       hird matrix)
  160 000000A4         ; parameters
  161 000000A4         ;    r0: int[][] matrix a – address of first array (firs
                       t matrix) 
  162 000000A4         ;    r1: int[][] matrix b – address of second array (sec
                       ond matrix) 
  163 000000A4         ;    r2: int[][] result - address of third array (third 
                       matrix) 
  164 000000A4         ;    r3: unsigned int N - the size of row and column
  165 000000A4         ;return
  166 000000A4         ;    nothing
  167 000000A4         matmul
  168 000000A4 E92D03F0        PUSH{R4-R9}
  169 000000A8         matmul1
  170 000000A8 E3A04000        LDR              R4, =0      ;i=0
  171 000000AC E3A05000        LDR              R5, =0      ;j=0
  172 000000B0 E3A06000        LDR              R6, =0      ;k=0
  173 000000B4         
  174 000000B4         matmul2
  175 000000B4 E1540003        CMP              R4,R3       ;for(i=0;
  176 000000B8 2A000017        BHS              endMatmul   ;         i<N;i++){
                                                            
  177 000000BC         matmul3
  178 000000BC E1550003        CMP              R5,R3       ;for(j=0;
  179 000000C0 2A000012        BHS              matmul6     ;         j<N;j++){
                                                            
  180 000000C4 E3A07000        LDR              R7,=0       ; r=0;
  181 000000C8         matmul4
  182 000000C8 E1560003        CMP              R6,R3       ;for(k=0;
  183 000000CC 2A000009        BHS              matmul5     ;        k<N;k++){
  184 000000D0 E0080394        MUL              R8,R4,R3    ;index(A[i]) = row 
                                                            * row_size
  185 000000D4 E0888006        ADD              R8,R8,R6    ;index(A[i,k]) = in
                                                            dex(A[i]) + column



ARM Macro Assembler    Page 5 


  186 000000D8 E7908108        LDR              R8,[R0,R8,LSL #2] ;elem(A[i,k])
                                                             = Memory.Word[ARR_
                                                            A + (index*4)]
  187 000000DC E0090396        MUL              R9,R6,R3    ;index(B[k]) = row 
                                                            * row_size
  188 000000E0 E0899005        ADD              R9,R9,R5    ;index(B[k,j]) = in
                                                            dex(B[k]) + column
  189 000000E4 E7919109        LDR              R9,[R1,R9,LSL #2] ;elem(B[k,j])
                                                             = Memory.Word[ARR_
                                                            B + (index*4)]
  190 000000E8 E0080899        MUL              R8,R9,R8    ; ( A[ i , k ] * B[
                                                             k , j ] )
  191 000000EC E0877008        ADD              R7,R7,R8    ;r = r + ( A[ i , k
                                                             ] * B[ k , j ] ) ;
                                                            
  192 000000F0 E2866001        ADD              R6,R6,#1    ;k++;
  193 000000F4 EAFFFFF3        B                matmul4     ;}
  194 000000F8         matmul5
  195 000000F8 E0080394        MUL              R8,R4,R3    ;index(R[i]) = row 
                                                            * row_size
  196 000000FC E0888005        ADD              R8,R8,R5    ;index(R[i,j]) = in
                                                            dex(R[i]) + column
  197 00000100 E7827108        STR              R7,[R2,R8,LSL #2] ;elem(R[i,j])
                                                             = Memory.Word[ARR_
                                                            R + (index*4)]
  198 00000104 E2855001        ADD              R5,R5,#1    ;j++
  199 00000108 E3A06000        LDR              R6, =0      ;k=0
  200 0000010C EAFFFFEA        B                matmul3     ;}
  201 00000110         matmul6
  202 00000110 E2844001        ADD              R4,R4,#1    ;i++
  203 00000114 E3A05000        LDR              R5, =0      ;j=0
  204 00000118 EAFFFFE5        B                matmul2     ;}
  205 0000011C         endMatmul
  206 0000011C E8BD03F0        POP              {R4-R9}
  207 00000120 E12FFF1E        BX               LR
  208 00000124         
  209 00000124         
  210 00000124         ;
  211 00000124         ; inithw subroutines
  212 00000124         ; performs hardware initialisation, including console
  213 00000124         ; parameters:
  214 00000124         ; none
  215 00000124         ; return value:
  216 00000124         ; none
  217 00000124         ;
  218 00000124         inithw
  219 00000124 E59F0124        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  220 00000128 E3A01050        MOV              R1, #0x50
  221 0000012C E5C01000        STRB             R1, [R0]
  222 00000130 E59F011C        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  223 00000134 E3A01002        LDR              R1, =0x02
  224 00000138 E5C01000        STRB             R1, [R0]
  225 0000013C E12FFF1E        BX               LR
  226 00000140         
  227 00000140         ;
  228 00000140         ; get subroutine
  229 00000140         ; returns the ASCII code of the next character read on t



ARM Macro Assembler    Page 6 


                       he console
  230 00000140         ; parameters:
  231 00000140         ; none
  232 00000140         ; return value:
  233 00000140         ; R0 - ASCII code of the character read on teh console (
                       byte)
  234 00000140         ;
  235 00000140         
  236 00000140         get
  237 00000140 E59F1110        LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  238 00000144 E5910000 
                       get0    LDR              R0, [R1]    ; wait until
  239 00000148 E2100001        ANDS             R0, #0x01   ; receiver data
  240 0000014C 0AFFFFFC        BEQ              get0        ; ready
  241 00000150 E59F1104        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  242 00000154 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  243 00000158 E12FFF1E        BX               LR          ; return
  244 0000015C         
  245 0000015C         ;
  246 0000015C         ; put subroutine
  247 0000015C         ; writes a character to the console
  248 0000015C         ; parameters:
  249 0000015C         ; R0 - ASCII code of the character to write
  250 0000015C         ; return value:
  251 0000015C         ; none
  252 0000015C         ;
  253 0000015C E59F10F4 
                       put     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  254 00000160 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  255 00000164 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  256 00000168 0AFFFFFB        BEQ              put         ; empty
  257 0000016C E59F10E8        LDR              R1, =U0THR  ; R1 -> U0THR
  258 00000170 E5C10000        STRB             R0, [R1]    ; output charcter
  259 00000174 E59F10DC 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  260 00000178 E5D11000        LDRB             R1, [R1]    ; wait until
  261 0000017C E2111040        ANDS             R1, R1, #0x40 ; transmitter
  262 00000180 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  263 00000184 E12FFF1E        BX               LR          ; return
  264 00000188         
  265 00000188         ;
  266 00000188         ; puts subroutine
  267 00000188         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  268 00000188         ; parameters:
  269 00000188         ; R0 - address of NULL-terminated ASCII string
  270 00000188         ; return value:
  271 00000188         ; R0 - ASCII code of the character read on teh console (
                       byte)
  272 00000188         ;
  273 00000188 E92D4010 



ARM Macro Assembler    Page 7 


                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  274 0000018C E1A04000        MOV              R4, R0      ; copy R0
  275 00000190 E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  276 00000194 E3500000        CMP              R0, #0      ; 0?
  277 00000198 0A000001        BEQ              puts1       ; return
  278 0000019C EBFFFFEE        BL               put         ; put character
  279 000001A0 EAFFFFFA        B                puts0       ; next character
  280 000001A4 E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  281 000001A8         
  282 000001A8         
  283 000001A8         ;
  284 000001A8         ; test arrays
  285 000001A8         ;
  286 000001A8         
  287 000001A8 00000001 
              00000002 
              00000003 
              00000004 ARR_A   DCD              1,  2,  3,  4
  288 000001B8 00000005 
              00000006 
              00000007 
              00000008         DCD              5,  6,  7,  8
  289 000001C8 00000009 
              0000000A 
              0000000B 
              0000000C         DCD              9, 10, 11, 12
  290 000001D8 0000000D 
              0000000E 
              0000000F 
              00000010         DCD              13, 14, 15, 16
  291 000001E8         
  292 000001E8 00000001 
              00000002 
              00000003 
              00000004 ARR_B   DCD              1,  2,  3,  4
  293 000001F8 00000005 
              00000006 
              00000007 
              00000008         DCD              5,  6,  7,  8
  294 00000208 00000009 
              0000000A 
              0000000B 
              0000000C         DCD              9, 10, 11, 12
  295 00000218 0000000D 
              0000000E 
              0000000F 
              00000010         DCD              13, 14, 15, 16
  296 00000228         
  297 00000228 50 6C 65 
              61 73 65 
              20 69 6E 
              70 75 74 
              20 73 74 
              72 69 6E 
              67 2E 0A 
              00 00    STR0    DCB              "Please input string.", 0x0a, 0



ARM Macro Assembler    Page 8 


, 0
  298 0000023F         
  299 0000023F                 END
              00 00000000 
              00000000 
              00000000 
              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab2-subroutines.d -o.\objects\lab2-subroutines.o -IC:\Keil_v5\ARM\RV31\
INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab2-su
broutines.lst lab2-subroutines.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARR_R 00000020

Symbol: ARR_R
   Definitions
      At line 23 in file lab2-subroutines.s
   Uses
      At line 54 in file lab2-subroutines.s
Comment: ARR_R used once
BUFFER 00000000

Symbol: BUFFER
   Definitions
      At line 20 in file lab2-subroutines.s
   Uses
      At line 43 in file lab2-subroutines.s
Comment: BUFFER used once
globals 00000000

Symbol: globals
   Definitions
      At line 17 in file lab2-subroutines.s
   Uses
      None
Comment: globals unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARR_A 000001A8

Symbol: ARR_A
   Definitions
      At line 287 in file lab2-subroutines.s
   Uses
      At line 52 in file lab2-subroutines.s
Comment: ARR_A used once
ARR_B 000001E8

Symbol: ARR_B
   Definitions
      At line 292 in file lab2-subroutines.s
   Uses
      At line 53 in file lab2-subroutines.s
Comment: ARR_B used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 26 in file lab2-subroutines.s
   Uses
      None
Comment: RESET unused
STOP 00000030

Symbol: STOP
   Definitions
      At line 58 in file lab2-subroutines.s
   Uses
      At line 58 in file lab2-subroutines.s
Comment: STOP used once
STR0 00000228

Symbol: STR0
   Definitions
      At line 297 in file lab2-subroutines.s
   Uses
      None
Comment: STR0 unused
emdMax 00000058

Symbol: emdMax
   Definitions
      At line 85 in file lab2-subroutines.s
   Uses
      At line 79 in file lab2-subroutines.s
      At line 82 in file lab2-subroutines.s

endGets 0000009C

Symbol: endGets
   Definitions
      At line 149 in file lab2-subroutines.s
   Uses
      At line 141 in file lab2-subroutines.s
      At line 146 in file lab2-subroutines.s

endMatmul 0000011C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: endMatmul
   Definitions
      At line 205 in file lab2-subroutines.s
   Uses
      At line 176 in file lab2-subroutines.s
Comment: endMatmul used once
get 00000140

Symbol: get
   Definitions
      At line 236 in file lab2-subroutines.s
   Uses
      At line 142 in file lab2-subroutines.s
Comment: get used once
get0 00000144

Symbol: get0
   Definitions
      At line 238 in file lab2-subroutines.s
   Uses
      At line 240 in file lab2-subroutines.s
Comment: get0 used once
gets 0000005C

Symbol: gets
   Definitions
      At line 131 in file lab2-subroutines.s
   Uses
      At line 45 in file lab2-subroutines.s
Comment: gets used once
gets1 00000078

Symbol: gets1
   Definitions
      At line 139 in file lab2-subroutines.s
   Uses
      At line 148 in file lab2-subroutines.s
Comment: gets1 used once
inithw 00000124

Symbol: inithw
   Definitions
      At line 218 in file lab2-subroutines.s
   Uses
      At line 29 in file lab2-subroutines.s
Comment: inithw used once
matmul 000000A4

Symbol: matmul
   Definitions
      At line 167 in file lab2-subroutines.s
   Uses
      At line 56 in file lab2-subroutines.s
Comment: matmul used once
matmul1 000000A8

Symbol: matmul1
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 169 in file lab2-subroutines.s
   Uses
      None
Comment: matmul1 unused
matmul2 000000B4

Symbol: matmul2
   Definitions
      At line 174 in file lab2-subroutines.s
   Uses
      At line 204 in file lab2-subroutines.s
Comment: matmul2 used once
matmul3 000000BC

Symbol: matmul3
   Definitions
      At line 177 in file lab2-subroutines.s
   Uses
      At line 200 in file lab2-subroutines.s
Comment: matmul3 used once
matmul4 000000C8

Symbol: matmul4
   Definitions
      At line 181 in file lab2-subroutines.s
   Uses
      At line 193 in file lab2-subroutines.s
Comment: matmul4 used once
matmul5 000000F8

Symbol: matmul5
   Definitions
      At line 194 in file lab2-subroutines.s
   Uses
      At line 183 in file lab2-subroutines.s
Comment: matmul5 used once
matmul6 00000110

Symbol: matmul6
   Definitions
      At line 201 in file lab2-subroutines.s
   Uses
      At line 179 in file lab2-subroutines.s
Comment: matmul6 used once
max 00000034

Symbol: max
   Definitions
      At line 72 in file lab2-subroutines.s
   Uses
      At line 37 in file lab2-subroutines.s
Comment: max used once
max2 00000044

Symbol: max2
   Definitions
      At line 77 in file lab2-subroutines.s
   Uses
      At line 74 in file lab2-subroutines.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: max2 used once
max3 0000004C

Symbol: max3
   Definitions
      At line 80 in file lab2-subroutines.s
   Uses
      At line 75 in file lab2-subroutines.s
Comment: max3 used once
max4 00000054

Symbol: max4
   Definitions
      At line 83 in file lab2-subroutines.s
   Uses
      At line 76 in file lab2-subroutines.s
Comment: max4 used once
put 0000015C

Symbol: put
   Definitions
      At line 253 in file lab2-subroutines.s
   Uses
      At line 143 in file lab2-subroutines.s
      At line 256 in file lab2-subroutines.s
      At line 278 in file lab2-subroutines.s

put0 00000174

Symbol: put0
   Definitions
      At line 259 in file lab2-subroutines.s
   Uses
      At line 262 in file lab2-subroutines.s
Comment: put0 used once
puts 00000188

Symbol: puts
   Definitions
      At line 273 in file lab2-subroutines.s
   Uses
      None
Comment: puts unused
puts0 00000190

Symbol: puts0
   Definitions
      At line 275 in file lab2-subroutines.s
   Uses
      At line 279 in file lab2-subroutines.s
Comment: puts0 used once
puts1 000001A4

Symbol: puts1
   Definitions
      At line 280 in file lab2-subroutines.s
   Uses
      At line 277 in file lab2-subroutines.s
Comment: puts1 used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BUFLEN 00000020

Symbol: BUFLEN
   Definitions
      At line 8 in file lab2-subroutines.s
   Uses
      At line 20 in file lab2-subroutines.s
      At line 44 in file lab2-subroutines.s

N 00000004

Symbol: N
   Definitions
      At line 7 in file lab2-subroutines.s
   Uses
      At line 23 in file lab2-subroutines.s
      At line 55 in file lab2-subroutines.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 10 in file lab2-subroutines.s
   Uses
      At line 219 in file lab2-subroutines.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 13 in file lab2-subroutines.s
   Uses
      At line 222 in file lab2-subroutines.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 14 in file lab2-subroutines.s
   Uses
      At line 237 in file lab2-subroutines.s
      At line 253 in file lab2-subroutines.s
      At line 259 in file lab2-subroutines.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 11 in file lab2-subroutines.s
   Uses
      At line 241 in file lab2-subroutines.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 12 in file lab2-subroutines.s
   Uses
      At line 257 in file lab2-subroutines.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: U0THR used once
7 symbols
373 symbols in table
